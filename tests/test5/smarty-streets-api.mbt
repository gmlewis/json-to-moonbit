pub struct AutoGenerated {
  auto_generated_array : Array[AutoGeneratedArray]
} derive(Show, Eq, ToJson, FromJson)

pub struct AutoGeneratedArray {
  input_index : Int
  candidate_index : Int
  delivery_line_1 : String
  last_line : String
  delivery_point_barcode : String
  components : Components
  metadata : Metadata
  analysis : Analysis
} derive(Show, Eq, ToJson, FromJson)

pub fn AutoGeneratedArray::new() -> AutoGeneratedArray {
  {
    input_index: 0,
    candidate_index: 0,
    delivery_line_1: "",
    last_line: "",
    delivery_point_barcode: "",
    components: Components::new(),
    metadata: Metadata::new(),
    analysis: Analysis::new(),
  }
}

pub struct Components {
  primary_number : String
  street_predirection : String
  street_name : String
  street_suffix : String
  city_name : String
  state_abbreviation : String
  zipcode : String
  plus4_code : String
  delivery_point : String
  delivery_point_check_digit : String
} derive(Show, Eq, ToJson, FromJson)

pub fn Components::new() -> Components {
  {
    primary_number: "",
    street_predirection: "",
    street_name: "",
    street_suffix: "",
    city_name: "",
    state_abbreviation: "",
    zipcode: "",
    plus4_code: "",
    delivery_point: "",
    delivery_point_check_digit: "",
  }
}

pub struct Metadata {
  record_type : String
  zip_type : String
  county_fips : String
  county_name : String
  carrier_route : String
  congressional_district : String
  rdi : String
  elot_sequence : String
  elot_sort : String
  latitude : Double
  longitude : Double
  precision : String
  time_zone : String
  utc_offset : Int
  dst : Bool
} derive(Show, Eq, ToJson, FromJson)

pub fn Metadata::new() -> Metadata {
  {
    record_type: "",
    zip_type: "",
    county_fips: "",
    county_name: "",
    carrier_route: "",
    congressional_district: "",
    rdi: "",
    elot_sequence: "",
    elot_sort: "",
    latitude: 0,
    longitude: 0,
    precision: "",
    time_zone: "",
    utc_offset: 0,
    dst: false,
  }
}

pub struct Analysis {
  dpv_match_code : String
  dpv_footnotes : String
  dpv_cmra : String
  dpv_vacant : String
  active : String
} derive(Show, Eq, ToJson, FromJson)

pub fn Analysis::new() -> Analysis {
  {
    dpv_match_code: "",
    dpv_footnotes: "",
    dpv_cmra: "",
    dpv_vacant: "",
    active: "",
  }
}
