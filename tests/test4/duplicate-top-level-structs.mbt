pub struct AutoGenerated {
  region : Region
  municipality : Municipality
  building : Building
} derive(Show, Eq, ToJson)

pub fn AutoGenerated::new() -> AutoGenerated {
  {
    region: Region::new(),
    municipality: Municipality::new(),
    building: Building::new(),
  }
}

pub impl @json.FromJson for AutoGenerated with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "AutoGenerated::from_json: expected object"),
      )
  }
  let region : Region = match json.get("region") {
    Some(Object(region)) => @json.from_json!(region.to_json())
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:region expected Region"))
  }
  let municipality : Municipality = match json.get("municipality") {
    Some(Object(municipality)) => @json.from_json!(municipality.to_json())
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:municipality expected Municipality"))
  }
  let building : Building = match json.get("building") {
    Some(Object(building)) => @json.from_json!(building.to_json())
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:building expected Building"))
  }
  {
    region,
    municipality,
    building,
  }
}

pub struct Identifier {
  type_ : String
  id : Int
} derive(Show, Eq)

pub fn Identifier::new() -> Identifier {
  {
    type_: "",
    id: 0,
  }
}

pub fn to_json(self : Identifier) -> Json {
  let json : Map[String, Json] = {}
  json["type"] = self.type_.to_json()
  json["id"] = self.id.to_json()
  json.to_json()
}

pub impl @json.FromJson for Identifier with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Identifier::from_json: expected object"),
      )
  }
  let type_ : String = match json.get("type") {
    Some(String(type_)) => type_
    _ => raise @json.JsonDecodeError((path, "Identifier::from_json:type_: expected String"))
  }
  let id : Int = match json.get("id") {
    Some(Number(id)) => id.to_int()
    _ => raise @json.JsonDecodeError((path, "Identifier::from_json:id expected Int"))
  }
  {
    type_,
    id,
  }
}

pub struct Region {
  identifier : Identifier
  autonomous : Bool
} derive(Show, Eq, ToJson)

pub fn Region::new() -> Region {
  {
    identifier: Identifier::new(),
    autonomous: false,
  }
}

pub impl @json.FromJson for Region with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Region::from_json: expected object"),
      )
  }
  let identifier : Identifier = match json.get("identifier") {
    Some(Object(identifier)) => @json.from_json!(identifier.to_json())
    _ => raise @json.JsonDecodeError((path, "Region::from_json:identifier expected Identifier"))
  }
  let autonomous : Bool = match json.get("autonomous") {
    Some(True) => true
    Some(False) => false
   _ => raise @json.JsonDecodeError((path, "Region::from_json:autonomous expected Bool"))
  }
  {
    identifier,
    autonomous,
  }
}

pub struct MunicipalityIdentifier {
  type_ : String
  name : String
} derive(Show, Eq)

pub fn MunicipalityIdentifier::new() -> MunicipalityIdentifier {
  {
    type_: "",
    name: "",
  }
}

pub fn to_json(self : MunicipalityIdentifier) -> Json {
  let json : Map[String, Json] = {}
  json["type"] = self.type_.to_json()
  json["name"] = self.name.to_json()
  json.to_json()
}

pub impl @json.FromJson for MunicipalityIdentifier with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "MunicipalityIdentifier::from_json: expected object"),
      )
  }
  let type_ : String = match json.get("type") {
    Some(String(type_)) => type_
    _ => raise @json.JsonDecodeError((path, "MunicipalityIdentifier::from_json:type_: expected String"))
  }
  let name : String = match json.get("name") {
    Some(String(name)) => name
    _ => raise @json.JsonDecodeError((path, "MunicipalityIdentifier::from_json:name: expected String"))
  }
  {
    type_,
    name,
  }
}

pub struct Municipality {
  municipality_identifier : MunicipalityIdentifier
} derive(Show, Eq)

pub fn Municipality::new() -> Municipality {
  {
    municipality_identifier: MunicipalityIdentifier::new(),
  }
}

pub fn to_json(self : Municipality) -> Json {
  let json : Map[String, Json] = {}
  json["identifier"] = self.municipality_identifier.to_json()
  json.to_json()
}

pub impl @json.FromJson for Municipality with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Municipality::from_json: expected object"),
      )
  }
  let municipality_identifier : MunicipalityIdentifier = match json.get("identifier") {
    Some(Object(municipality_identifier)) => @json.from_json!(municipality_identifier.to_json())
    _ => raise @json.JsonDecodeError((path, "Municipality::from_json:municipality_identifier expected MunicipalityIdentifier"))
  }
  {
    municipality_identifier,
  }
}

pub struct Postal {
  type_ : String
  id : Int
} derive(Show, Eq)

pub fn Postal::new() -> Postal {
  {
    type_: "",
    id: 0,
  }
}

pub fn to_json(self : Postal) -> Json {
  let json : Map[String, Json] = {}
  json["type"] = self.type_.to_json()
  json["id"] = self.id.to_json()
  json.to_json()
}

pub impl @json.FromJson for Postal with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Postal::from_json: expected object"),
      )
  }
  let type_ : String = match json.get("type") {
    Some(String(type_)) => type_
    _ => raise @json.JsonDecodeError((path, "Postal::from_json:type_: expected String"))
  }
  let id : Int = match json.get("id") {
    Some(Number(id)) => id.to_int()
    _ => raise @json.JsonDecodeError((path, "Postal::from_json:id expected Int"))
  }
  {
    type_,
    id,
  }
}

pub struct Road {
  name : String
  id : Int
} derive(Show, Eq, ToJson)

pub fn Road::new() -> Road {
  {
    name: "",
    id: 0,
  }
}

pub impl @json.FromJson for Road with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Road::from_json: expected object"),
      )
  }
  let name : String = match json.get("name") {
    Some(String(name)) => name
    _ => raise @json.JsonDecodeError((path, "Road::from_json:name: expected String"))
  }
  let id : Int = match json.get("id") {
    Some(Number(id)) => id.to_int()
    _ => raise @json.JsonDecodeError((path, "Road::from_json:id expected Int"))
  }
  {
    name,
    id,
  }
}

pub struct BuildingIdentifier {
  postal : Postal
  road : Road
} derive(Show, Eq, ToJson)

pub fn BuildingIdentifier::new() -> BuildingIdentifier {
  {
    postal: Postal::new(),
    road: Road::new(),
  }
}

pub impl @json.FromJson for BuildingIdentifier with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "BuildingIdentifier::from_json: expected object"),
      )
  }
  let postal : Postal = match json.get("postal") {
    Some(Object(postal)) => @json.from_json!(postal.to_json())
    _ => raise @json.JsonDecodeError((path, "BuildingIdentifier::from_json:postal expected Postal"))
  }
  let road : Road = match json.get("road") {
    Some(Object(road)) => @json.from_json!(road.to_json())
    _ => raise @json.JsonDecodeError((path, "BuildingIdentifier::from_json:road expected Road"))
  }
  {
    postal,
    road,
  }
}

pub struct Building {
  building_identifier : BuildingIdentifier
} derive(Show, Eq)

pub fn Building::new() -> Building {
  {
    building_identifier: BuildingIdentifier::new(),
  }
}

pub fn to_json(self : Building) -> Json {
  let json : Map[String, Json] = {}
  json["identifier"] = self.building_identifier.to_json()
  json.to_json()
}

pub impl @json.FromJson for Building with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Building::from_json: expected object"),
      )
  }
  let building_identifier : BuildingIdentifier = match json.get("identifier") {
    Some(Object(building_identifier)) => @json.from_json!(building_identifier.to_json())
    _ => raise @json.JsonDecodeError((path, "Building::from_json:building_identifier expected BuildingIdentifier"))
  }
  {
    building_identifier,
  }
}
