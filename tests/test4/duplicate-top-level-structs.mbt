pub struct AutoGenerated {
  region : Region
  municipality : Municipality
  building : Building
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for AutoGenerated with from_json(json, path) {
  match json {
    {
      "region": region,
      "municipality": municipality,
      "building": building,
    } => {
      let region : Region = @json.from_json!(region)
      let municipality : Municipality = @json.from_json!(municipality)
      let building : Building = @json.from_json!(building)
      {
        region,
        municipality,
        building,
      }
    }
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json: expected object"))
  }
}

pub struct Identifier {
  type_ : String
  id : Int
} derive(Show, Eq)

pub fn to_json(self : Identifier) -> Json {
  {
    "type": self.type_.to_json(),
    "id": self.id.to_json(),
  }
}

pub impl @json.FromJson for Identifier with from_json(json, path) {
  match json {
    {
      "type": String(type_),
      "id": Number(id),
    } => {
      let id = id.to_int()
      {
        type_,
        id,
      }
    }
    _ => raise @json.JsonDecodeError((path, "Identifier::from_json: expected object"))
  }
}

pub struct Region {
  identifier : Identifier
  autonomous : Bool
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for Region with from_json(json, path) {
  match json {
    {
      "identifier": identifier,
      "autonomous": autonomous,
    } => {
      let identifier : Identifier = @json.from_json!(identifier)
      let autonomous = autonomous.as_bool().or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
      {
        identifier,
        autonomous,
      }
    }
    _ => raise @json.JsonDecodeError((path, "Region::from_json: expected object"))
  }
}

pub struct MunicipalityIdentifier {
  type_ : String
  name : String
} derive(Show, Eq)

pub fn to_json(self : MunicipalityIdentifier) -> Json {
  {
    "type": self.type_.to_json(),
    "name": self.name.to_json(),
  }
}

pub impl @json.FromJson for MunicipalityIdentifier with from_json(json, path) {
  match json {
    {
      "type": String(type_),
      "name": String(name),
    } => {
      {
        type_,
        name,
      }
    }
    _ => raise @json.JsonDecodeError((path, "MunicipalityIdentifier::from_json: expected object"))
  }
}

pub struct Municipality {
  municipality_identifier : MunicipalityIdentifier
} derive(Show, Eq)

pub fn to_json(self : Municipality) -> Json {
  {
    "identifier": self.municipality_identifier.to_json(),
  }
}

pub impl @json.FromJson for Municipality with from_json(json, path) {
  match json {
    {
      "identifier": municipality_identifier,
    } => {
      let municipality_identifier : MunicipalityIdentifier = @json.from_json!(municipality_identifier)
      {
        municipality_identifier,
      }
    }
    _ => raise @json.JsonDecodeError((path, "Municipality::from_json: expected object"))
  }
}

pub struct Postal {
  type_ : String
  id : Int
} derive(Show, Eq)

pub fn to_json(self : Postal) -> Json {
  {
    "type": self.type_.to_json(),
    "id": self.id.to_json(),
  }
}

pub impl @json.FromJson for Postal with from_json(json, path) {
  match json {
    {
      "type": String(type_),
      "id": Number(id),
    } => {
      let id = id.to_int()
      {
        type_,
        id,
      }
    }
    _ => raise @json.JsonDecodeError((path, "Postal::from_json: expected object"))
  }
}

pub struct Road {
  name : String
  id : Int
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for Road with from_json(json, path) {
  match json {
    {
      "name": String(name),
      "id": Number(id),
    } => {
      let id = id.to_int()
      {
        name,
        id,
      }
    }
    _ => raise @json.JsonDecodeError((path, "Road::from_json: expected object"))
  }
}

pub struct BuildingIdentifier {
  postal : Postal
  road : Road
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for BuildingIdentifier with from_json(json, path) {
  match json {
    {
      "postal": postal,
      "road": road,
    } => {
      let postal : Postal = @json.from_json!(postal)
      let road : Road = @json.from_json!(road)
      {
        postal,
        road,
      }
    }
    _ => raise @json.JsonDecodeError((path, "BuildingIdentifier::from_json: expected object"))
  }
}

pub struct Building {
  building_identifier : BuildingIdentifier
} derive(Show, Eq)

pub fn to_json(self : Building) -> Json {
  {
    "identifier": self.building_identifier.to_json(),
  }
}

pub impl @json.FromJson for Building with from_json(json, path) {
  match json {
    {
      "identifier": building_identifier,
    } => {
      let building_identifier : BuildingIdentifier = @json.from_json!(building_identifier)
      {
        building_identifier,
      }
    }
    _ => raise @json.JsonDecodeError((path, "Building::from_json: expected object"))
  }
}
