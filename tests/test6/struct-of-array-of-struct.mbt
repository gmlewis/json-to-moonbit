pub struct AutoGenerated {
  people : Array[People]
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for AutoGenerated with from_json(json, path) {
  match json {
    {
      "people": Array(people),
    } => {
      let people : Array[People] = people_array_from_json!(people)
      {
        people,
      }
    }
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json: expected object"))
  }
}

pub fn people_array_from_json(json : Array[Json]) -> Array[People]!@json.JsonDecodeError {
  let arr: Array[People] = Array::new(capacity = json.length())
  each_exn!(
    json,
    fn(jv) {
      let el : People = @json.from_json!(jv)
      arr.push(el)
    }
  )
  arr
}

pub struct People {
  name : String
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for People with from_json(json, path) {
  match json {
    {
      "name": String(name),
    } => {
      {
        name,
      }
    }
    _ => raise @json.JsonDecodeError((path, "People::from_json: expected object"))
  }
}

fn each_exn[T](arr : Array[T], func : (T) -> Unit!@json.JsonDecodeError) -> Unit!@json.JsonDecodeError {
  for i = 0; i < arr.length(); i = i + 1 {
    func!(arr[i])
  }
}
