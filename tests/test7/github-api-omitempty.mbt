pub struct AutoGenerated {
  id : Int?
  owner : Owner?
  name : String?
  full_name : String?
  description : String?
  private : Bool?
  fork : Bool?
  url : String?
  html_url : String?
  clone_url : String?
  git_url : String?
  ssh_url : String?
  svn_url : String?
  mirror_url : String?
  homepage : String?
  language : Json?
  forks_count : Int?
  stargazers_count : Int?
  watchers_count : Int?
  size : Int?
  default_branch : String?
  open_issues_count : Int?
  has_issues : Bool?
  has_wiki : Bool?
  has_downloads : Bool?
  pushed_at : String?
  created_at : String?
  updated_at : String?
  permissions : Permissions?
  subscribers_count : Int?
  organization : Organization?
  parent : Parent?
  source : Source?
} derive(Show, Eq)

pub fn AutoGenerated::new() -> AutoGenerated {
  {
    id: None,
    owner: None,
    name: None,
    full_name: None,
    description: None,
    private: None,
    fork: None,
    url: None,
    html_url: None,
    clone_url: None,
    git_url: None,
    ssh_url: None,
    svn_url: None,
    mirror_url: None,
    homepage: None,
    language: None,
    forks_count: None,
    stargazers_count: None,
    watchers_count: None,
    size: None,
    default_branch: None,
    open_issues_count: None,
    has_issues: None,
    has_wiki: None,
    has_downloads: None,
    pushed_at: None,
    created_at: None,
    updated_at: None,
    permissions: None,
    subscribers_count: None,
    organization: None,
    parent: None,
    source: None,
  }
}

pub fn to_json(self : AutoGenerated) -> Json {
  let json : Map[String, Json] = {}
  match self.id {
    Some(id) => json["id"] = id.to_json()
    _ => ()
  }
  match self.owner {
    Some(owner) => json["owner"] = owner.to_json()
    _ => ()
  }
  match self.name {
    Some(name) => json["name"] = name.to_json()
    _ => ()
  }
  match self.full_name {
    Some(full_name) => json["full_name"] = full_name.to_json()
    _ => ()
  }
  match self.description {
    Some(description) => json["description"] = description.to_json()
    _ => ()
  }
  match self.private {
    Some(private) => json["private"] = private.to_json()
    _ => ()
  }
  match self.fork {
    Some(fork) => json["fork"] = fork.to_json()
    _ => ()
  }
  match self.url {
    Some(url) => json["url"] = url.to_json()
    _ => ()
  }
  match self.html_url {
    Some(html_url) => json["html_url"] = html_url.to_json()
    _ => ()
  }
  match self.clone_url {
    Some(clone_url) => json["clone_url"] = clone_url.to_json()
    _ => ()
  }
  match self.git_url {
    Some(git_url) => json["git_url"] = git_url.to_json()
    _ => ()
  }
  match self.ssh_url {
    Some(ssh_url) => json["ssh_url"] = ssh_url.to_json()
    _ => ()
  }
  match self.svn_url {
    Some(svn_url) => json["svn_url"] = svn_url.to_json()
    _ => ()
  }
  match self.mirror_url {
    Some(mirror_url) => json["mirror_url"] = mirror_url.to_json()
    _ => ()
  }
  match self.homepage {
    Some(homepage) => json["homepage"] = homepage.to_json()
    _ => ()
  }
  match self.language {
    Some(language) => json["language"] = language.to_json()
    _ => ()
  }
  match self.forks_count {
    Some(forks_count) => json["forks_count"] = forks_count.to_json()
    _ => ()
  }
  match self.stargazers_count {
    Some(stargazers_count) => json["stargazers_count"] = stargazers_count.to_json()
    _ => ()
  }
  match self.watchers_count {
    Some(watchers_count) => json["watchers_count"] = watchers_count.to_json()
    _ => ()
  }
  match self.size {
    Some(size) => json["size"] = size.to_json()
    _ => ()
  }
  match self.default_branch {
    Some(default_branch) => json["default_branch"] = default_branch.to_json()
    _ => ()
  }
  match self.open_issues_count {
    Some(open_issues_count) => json["open_issues_count"] = open_issues_count.to_json()
    _ => ()
  }
  match self.has_issues {
    Some(has_issues) => json["has_issues"] = has_issues.to_json()
    _ => ()
  }
  match self.has_wiki {
    Some(has_wiki) => json["has_wiki"] = has_wiki.to_json()
    _ => ()
  }
  match self.has_downloads {
    Some(has_downloads) => json["has_downloads"] = has_downloads.to_json()
    _ => ()
  }
  match self.pushed_at {
    Some(pushed_at) => json["pushed_at"] = pushed_at.to_json()
    _ => ()
  }
  match self.created_at {
    Some(created_at) => json["created_at"] = created_at.to_json()
    _ => ()
  }
  match self.updated_at {
    Some(updated_at) => json["updated_at"] = updated_at.to_json()
    _ => ()
  }
  match self.permissions {
    Some(permissions) => json["permissions"] = permissions.to_json()
    _ => ()
  }
  match self.subscribers_count {
    Some(subscribers_count) => json["subscribers_count"] = subscribers_count.to_json()
    _ => ()
  }
  match self.organization {
    Some(organization) => json["organization"] = organization.to_json()
    _ => ()
  }
  match self.parent {
    Some(parent) => json["parent"] = parent.to_json()
    _ => ()
  }
  match self.source {
    Some(source) => json["source"] = source.to_json()
    _ => ()
  }
  json.to_json()
}

pub impl @json.FromJson for AutoGenerated with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "AutoGenerated::from_json: expected object"),
      )
  }
  let id : Int? = match json.get("id") {
    Some(Number(id)) => Some(id.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:id expected Int or Null"))
  }
  let owner : Owner? = match json.get("owner") {
    Some(Object(owner)) => Some(@json.from_json!(owner.to_json()))
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:owner expected Owner or Null"))
  }
  let name : String? = match json.get("name") {
    Some(String(name)) => Some(name)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:name expected String or Null"))
  }
  let full_name : String? = match json.get("full_name") {
    Some(String(full_name)) => Some(full_name)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:full_name expected String or Null"))
  }
  let description : String? = match json.get("description") {
    Some(String(description)) => Some(description)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:description expected String or Null"))
  }
  let private : Bool? = match json.get("private") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:private expected Bool or Null"))
  }
  let fork : Bool? = match json.get("fork") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:fork expected Bool or Null"))
  }
  let url : String? = match json.get("url") {
    Some(String(url)) => Some(url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:url expected String or Null"))
  }
  let html_url : String? = match json.get("html_url") {
    Some(String(html_url)) => Some(html_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:html_url expected String or Null"))
  }
  let clone_url : String? = match json.get("clone_url") {
    Some(String(clone_url)) => Some(clone_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:clone_url expected String or Null"))
  }
  let git_url : String? = match json.get("git_url") {
    Some(String(git_url)) => Some(git_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:git_url expected String or Null"))
  }
  let ssh_url : String? = match json.get("ssh_url") {
    Some(String(ssh_url)) => Some(ssh_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:ssh_url expected String or Null"))
  }
  let svn_url : String? = match json.get("svn_url") {
    Some(String(svn_url)) => Some(svn_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:svn_url expected String or Null"))
  }
  let mirror_url : String? = match json.get("mirror_url") {
    Some(String(mirror_url)) => Some(mirror_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:mirror_url expected String or Null"))
  }
  let homepage : String? = match json.get("homepage") {
    Some(String(homepage)) => Some(homepage)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:homepage expected String or Null"))
  }
  let language : Json? = json.get("language")
  let forks_count : Int? = match json.get("forks_count") {
    Some(Number(forks_count)) => Some(forks_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:forks_count expected Int or Null"))
  }
  let stargazers_count : Int? = match json.get("stargazers_count") {
    Some(Number(stargazers_count)) => Some(stargazers_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:stargazers_count expected Int or Null"))
  }
  let watchers_count : Int? = match json.get("watchers_count") {
    Some(Number(watchers_count)) => Some(watchers_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:watchers_count expected Int or Null"))
  }
  let size : Int? = match json.get("size") {
    Some(Number(size)) => Some(size.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:size expected Int or Null"))
  }
  let default_branch : String? = match json.get("default_branch") {
    Some(String(default_branch)) => Some(default_branch)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:default_branch expected String or Null"))
  }
  let open_issues_count : Int? = match json.get("open_issues_count") {
    Some(Number(open_issues_count)) => Some(open_issues_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:open_issues_count expected Int or Null"))
  }
  let has_issues : Bool? = match json.get("has_issues") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:has_issues expected Bool or Null"))
  }
  let has_wiki : Bool? = match json.get("has_wiki") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:has_wiki expected Bool or Null"))
  }
  let has_downloads : Bool? = match json.get("has_downloads") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:has_downloads expected Bool or Null"))
  }
  let pushed_at : String? = match json.get("pushed_at") {
    Some(String(pushed_at)) => Some(pushed_at)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:pushed_at expected String or Null"))
  }
  let created_at : String? = match json.get("created_at") {
    Some(String(created_at)) => Some(created_at)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:created_at expected String or Null"))
  }
  let updated_at : String? = match json.get("updated_at") {
    Some(String(updated_at)) => Some(updated_at)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:updated_at expected String or Null"))
  }
  let permissions : Permissions? = match json.get("permissions") {
    Some(Object(permissions)) => Some(@json.from_json!(permissions.to_json()))
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:permissions expected Permissions or Null"))
  }
  let subscribers_count : Int? = match json.get("subscribers_count") {
    Some(Number(subscribers_count)) => Some(subscribers_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:subscribers_count expected Int or Null"))
  }
  let organization : Organization? = match json.get("organization") {
    Some(Object(organization)) => Some(@json.from_json!(organization.to_json()))
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:organization expected Organization or Null"))
  }
  let parent : Parent? = match json.get("parent") {
    Some(Object(parent)) => Some(@json.from_json!(parent.to_json()))
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:parent expected Parent or Null"))
  }
  let source : Source? = match json.get("source") {
    Some(Object(source)) => Some(@json.from_json!(source.to_json()))
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:source expected Source or Null"))
  }
  {
    id,
    owner,
    name,
    full_name,
    description,
    private,
    fork,
    url,
    html_url,
    clone_url,
    git_url,
    ssh_url,
    svn_url,
    mirror_url,
    homepage,
    language,
    forks_count,
    stargazers_count,
    watchers_count,
    size,
    default_branch,
    open_issues_count,
    has_issues,
    has_wiki,
    has_downloads,
    pushed_at,
    created_at,
    updated_at,
    permissions,
    subscribers_count,
    organization,
    parent,
    source,
  }
}

pub struct Owner {
  login : String?
  id : Int?
  avatar_url : String?
  gravatar_id : String?
  url : String?
  html_url : String?
  followers_url : String?
  following_url : String?
  gists_url : String?
  starred_url : String?
  subscriptions_url : String?
  organizations_url : String?
  repos_url : String?
  events_url : String?
  received_events_url : String?
  type_ : String?
  site_admin : Bool?
} derive(Show, Eq)

pub fn Owner::new() -> Owner {
  {
    login: None,
    id: None,
    avatar_url: None,
    gravatar_id: None,
    url: None,
    html_url: None,
    followers_url: None,
    following_url: None,
    gists_url: None,
    starred_url: None,
    subscriptions_url: None,
    organizations_url: None,
    repos_url: None,
    events_url: None,
    received_events_url: None,
    type_: None,
    site_admin: None,
  }
}

pub fn to_json(self : Owner) -> Json {
  let json : Map[String, Json] = {}
  match self.login {
    Some(login) => json["login"] = login.to_json()
    _ => ()
  }
  match self.id {
    Some(id) => json["id"] = id.to_json()
    _ => ()
  }
  match self.avatar_url {
    Some(avatar_url) => json["avatar_url"] = avatar_url.to_json()
    _ => ()
  }
  match self.gravatar_id {
    Some(gravatar_id) => json["gravatar_id"] = gravatar_id.to_json()
    _ => ()
  }
  match self.url {
    Some(url) => json["url"] = url.to_json()
    _ => ()
  }
  match self.html_url {
    Some(html_url) => json["html_url"] = html_url.to_json()
    _ => ()
  }
  match self.followers_url {
    Some(followers_url) => json["followers_url"] = followers_url.to_json()
    _ => ()
  }
  match self.following_url {
    Some(following_url) => json["following_url"] = following_url.to_json()
    _ => ()
  }
  match self.gists_url {
    Some(gists_url) => json["gists_url"] = gists_url.to_json()
    _ => ()
  }
  match self.starred_url {
    Some(starred_url) => json["starred_url"] = starred_url.to_json()
    _ => ()
  }
  match self.subscriptions_url {
    Some(subscriptions_url) => json["subscriptions_url"] = subscriptions_url.to_json()
    _ => ()
  }
  match self.organizations_url {
    Some(organizations_url) => json["organizations_url"] = organizations_url.to_json()
    _ => ()
  }
  match self.repos_url {
    Some(repos_url) => json["repos_url"] = repos_url.to_json()
    _ => ()
  }
  match self.events_url {
    Some(events_url) => json["events_url"] = events_url.to_json()
    _ => ()
  }
  match self.received_events_url {
    Some(received_events_url) => json["received_events_url"] = received_events_url.to_json()
    _ => ()
  }
  match self.type_ {
    Some(type_) => json["type_"] = type_.to_json()
    _ => ()
  }
  match self.site_admin {
    Some(site_admin) => json["site_admin"] = site_admin.to_json()
    _ => ()
  }
  json.to_json()
}

pub impl @json.FromJson for Owner with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Owner::from_json: expected object"),
      )
  }
  let login : String? = match json.get("login") {
    Some(String(login)) => Some(login)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:login expected String or Null"))
  }
  let id : Int? = match json.get("id") {
    Some(Number(id)) => Some(id.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:id expected Int or Null"))
  }
  let avatar_url : String? = match json.get("avatar_url") {
    Some(String(avatar_url)) => Some(avatar_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:avatar_url expected String or Null"))
  }
  let gravatar_id : String? = match json.get("gravatar_id") {
    Some(String(gravatar_id)) => Some(gravatar_id)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:gravatar_id expected String or Null"))
  }
  let url : String? = match json.get("url") {
    Some(String(url)) => Some(url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:url expected String or Null"))
  }
  let html_url : String? = match json.get("html_url") {
    Some(String(html_url)) => Some(html_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:html_url expected String or Null"))
  }
  let followers_url : String? = match json.get("followers_url") {
    Some(String(followers_url)) => Some(followers_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:followers_url expected String or Null"))
  }
  let following_url : String? = match json.get("following_url") {
    Some(String(following_url)) => Some(following_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:following_url expected String or Null"))
  }
  let gists_url : String? = match json.get("gists_url") {
    Some(String(gists_url)) => Some(gists_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:gists_url expected String or Null"))
  }
  let starred_url : String? = match json.get("starred_url") {
    Some(String(starred_url)) => Some(starred_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:starred_url expected String or Null"))
  }
  let subscriptions_url : String? = match json.get("subscriptions_url") {
    Some(String(subscriptions_url)) => Some(subscriptions_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:subscriptions_url expected String or Null"))
  }
  let organizations_url : String? = match json.get("organizations_url") {
    Some(String(organizations_url)) => Some(organizations_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:organizations_url expected String or Null"))
  }
  let repos_url : String? = match json.get("repos_url") {
    Some(String(repos_url)) => Some(repos_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:repos_url expected String or Null"))
  }
  let events_url : String? = match json.get("events_url") {
    Some(String(events_url)) => Some(events_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:events_url expected String or Null"))
  }
  let received_events_url : String? = match json.get("received_events_url") {
    Some(String(received_events_url)) => Some(received_events_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:received_events_url expected String or Null"))
  }
  let type_ : String? = match json.get("type") {
    Some(String(type_)) => Some(type_)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:type_ expected String or Null"))
  }
  let site_admin : Bool? = match json.get("site_admin") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Owner::from_json:site_admin expected Bool or Null"))
  }
  {
    login,
    id,
    avatar_url,
    gravatar_id,
    url,
    html_url,
    followers_url,
    following_url,
    gists_url,
    starred_url,
    subscriptions_url,
    organizations_url,
    repos_url,
    events_url,
    received_events_url,
    type_,
    site_admin,
  }
}

pub struct Permissions {
  admin : Bool?
  push : Bool?
  pull : Bool?
} derive(Show, Eq)

pub fn Permissions::new() -> Permissions {
  {
    admin: None,
    push: None,
    pull: None,
  }
}

pub fn to_json(self : Permissions) -> Json {
  let json : Map[String, Json] = {}
  match self.admin {
    Some(admin) => json["admin"] = admin.to_json()
    _ => ()
  }
  match self.push {
    Some(push) => json["push"] = push.to_json()
    _ => ()
  }
  match self.pull {
    Some(pull) => json["pull"] = pull.to_json()
    _ => ()
  }
  json.to_json()
}

pub impl @json.FromJson for Permissions with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Permissions::from_json: expected object"),
      )
  }
  let admin : Bool? = match json.get("admin") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Permissions::from_json:admin expected Bool or Null"))
  }
  let push : Bool? = match json.get("push") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Permissions::from_json:push expected Bool or Null"))
  }
  let pull : Bool? = match json.get("pull") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Permissions::from_json:pull expected Bool or Null"))
  }
  {
    admin,
    push,
    pull,
  }
}

pub struct Organization {
  login : String?
  id : Int?
  avatar_url : String?
  gravatar_id : String?
  url : String?
  html_url : String?
  followers_url : String?
  following_url : String?
  gists_url : String?
  starred_url : String?
  subscriptions_url : String?
  organizations_url : String?
  repos_url : String?
  events_url : String?
  received_events_url : String?
  type_ : String?
  site_admin : Bool?
} derive(Show, Eq)

pub fn Organization::new() -> Organization {
  {
    login: None,
    id: None,
    avatar_url: None,
    gravatar_id: None,
    url: None,
    html_url: None,
    followers_url: None,
    following_url: None,
    gists_url: None,
    starred_url: None,
    subscriptions_url: None,
    organizations_url: None,
    repos_url: None,
    events_url: None,
    received_events_url: None,
    type_: None,
    site_admin: None,
  }
}

pub fn to_json(self : Organization) -> Json {
  let json : Map[String, Json] = {}
  match self.login {
    Some(login) => json["login"] = login.to_json()
    _ => ()
  }
  match self.id {
    Some(id) => json["id"] = id.to_json()
    _ => ()
  }
  match self.avatar_url {
    Some(avatar_url) => json["avatar_url"] = avatar_url.to_json()
    _ => ()
  }
  match self.gravatar_id {
    Some(gravatar_id) => json["gravatar_id"] = gravatar_id.to_json()
    _ => ()
  }
  match self.url {
    Some(url) => json["url"] = url.to_json()
    _ => ()
  }
  match self.html_url {
    Some(html_url) => json["html_url"] = html_url.to_json()
    _ => ()
  }
  match self.followers_url {
    Some(followers_url) => json["followers_url"] = followers_url.to_json()
    _ => ()
  }
  match self.following_url {
    Some(following_url) => json["following_url"] = following_url.to_json()
    _ => ()
  }
  match self.gists_url {
    Some(gists_url) => json["gists_url"] = gists_url.to_json()
    _ => ()
  }
  match self.starred_url {
    Some(starred_url) => json["starred_url"] = starred_url.to_json()
    _ => ()
  }
  match self.subscriptions_url {
    Some(subscriptions_url) => json["subscriptions_url"] = subscriptions_url.to_json()
    _ => ()
  }
  match self.organizations_url {
    Some(organizations_url) => json["organizations_url"] = organizations_url.to_json()
    _ => ()
  }
  match self.repos_url {
    Some(repos_url) => json["repos_url"] = repos_url.to_json()
    _ => ()
  }
  match self.events_url {
    Some(events_url) => json["events_url"] = events_url.to_json()
    _ => ()
  }
  match self.received_events_url {
    Some(received_events_url) => json["received_events_url"] = received_events_url.to_json()
    _ => ()
  }
  match self.type_ {
    Some(type_) => json["type_"] = type_.to_json()
    _ => ()
  }
  match self.site_admin {
    Some(site_admin) => json["site_admin"] = site_admin.to_json()
    _ => ()
  }
  json.to_json()
}

pub impl @json.FromJson for Organization with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Organization::from_json: expected object"),
      )
  }
  let login : String? = match json.get("login") {
    Some(String(login)) => Some(login)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:login expected String or Null"))
  }
  let id : Int? = match json.get("id") {
    Some(Number(id)) => Some(id.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:id expected Int or Null"))
  }
  let avatar_url : String? = match json.get("avatar_url") {
    Some(String(avatar_url)) => Some(avatar_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:avatar_url expected String or Null"))
  }
  let gravatar_id : String? = match json.get("gravatar_id") {
    Some(String(gravatar_id)) => Some(gravatar_id)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:gravatar_id expected String or Null"))
  }
  let url : String? = match json.get("url") {
    Some(String(url)) => Some(url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:url expected String or Null"))
  }
  let html_url : String? = match json.get("html_url") {
    Some(String(html_url)) => Some(html_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:html_url expected String or Null"))
  }
  let followers_url : String? = match json.get("followers_url") {
    Some(String(followers_url)) => Some(followers_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:followers_url expected String or Null"))
  }
  let following_url : String? = match json.get("following_url") {
    Some(String(following_url)) => Some(following_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:following_url expected String or Null"))
  }
  let gists_url : String? = match json.get("gists_url") {
    Some(String(gists_url)) => Some(gists_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:gists_url expected String or Null"))
  }
  let starred_url : String? = match json.get("starred_url") {
    Some(String(starred_url)) => Some(starred_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:starred_url expected String or Null"))
  }
  let subscriptions_url : String? = match json.get("subscriptions_url") {
    Some(String(subscriptions_url)) => Some(subscriptions_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:subscriptions_url expected String or Null"))
  }
  let organizations_url : String? = match json.get("organizations_url") {
    Some(String(organizations_url)) => Some(organizations_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:organizations_url expected String or Null"))
  }
  let repos_url : String? = match json.get("repos_url") {
    Some(String(repos_url)) => Some(repos_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:repos_url expected String or Null"))
  }
  let events_url : String? = match json.get("events_url") {
    Some(String(events_url)) => Some(events_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:events_url expected String or Null"))
  }
  let received_events_url : String? = match json.get("received_events_url") {
    Some(String(received_events_url)) => Some(received_events_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:received_events_url expected String or Null"))
  }
  let type_ : String? = match json.get("type") {
    Some(String(type_)) => Some(type_)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:type_ expected String or Null"))
  }
  let site_admin : Bool? = match json.get("site_admin") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Organization::from_json:site_admin expected Bool or Null"))
  }
  {
    login,
    id,
    avatar_url,
    gravatar_id,
    url,
    html_url,
    followers_url,
    following_url,
    gists_url,
    starred_url,
    subscriptions_url,
    organizations_url,
    repos_url,
    events_url,
    received_events_url,
    type_,
    site_admin,
  }
}

pub struct ParentOwner {
  login : String?
  id : Int?
  avatar_url : String?
  gravatar_id : String?
  url : String?
  html_url : String?
  followers_url : String?
  following_url : String?
  gists_url : String?
  starred_url : String?
  subscriptions_url : String?
  organizations_url : String?
  repos_url : String?
  events_url : String?
  received_events_url : String?
  type_ : String?
  site_admin : Bool?
} derive(Show, Eq)

pub fn ParentOwner::new() -> ParentOwner {
  {
    login: None,
    id: None,
    avatar_url: None,
    gravatar_id: None,
    url: None,
    html_url: None,
    followers_url: None,
    following_url: None,
    gists_url: None,
    starred_url: None,
    subscriptions_url: None,
    organizations_url: None,
    repos_url: None,
    events_url: None,
    received_events_url: None,
    type_: None,
    site_admin: None,
  }
}

pub fn to_json(self : ParentOwner) -> Json {
  let json : Map[String, Json] = {}
  match self.login {
    Some(login) => json["login"] = login.to_json()
    _ => ()
  }
  match self.id {
    Some(id) => json["id"] = id.to_json()
    _ => ()
  }
  match self.avatar_url {
    Some(avatar_url) => json["avatar_url"] = avatar_url.to_json()
    _ => ()
  }
  match self.gravatar_id {
    Some(gravatar_id) => json["gravatar_id"] = gravatar_id.to_json()
    _ => ()
  }
  match self.url {
    Some(url) => json["url"] = url.to_json()
    _ => ()
  }
  match self.html_url {
    Some(html_url) => json["html_url"] = html_url.to_json()
    _ => ()
  }
  match self.followers_url {
    Some(followers_url) => json["followers_url"] = followers_url.to_json()
    _ => ()
  }
  match self.following_url {
    Some(following_url) => json["following_url"] = following_url.to_json()
    _ => ()
  }
  match self.gists_url {
    Some(gists_url) => json["gists_url"] = gists_url.to_json()
    _ => ()
  }
  match self.starred_url {
    Some(starred_url) => json["starred_url"] = starred_url.to_json()
    _ => ()
  }
  match self.subscriptions_url {
    Some(subscriptions_url) => json["subscriptions_url"] = subscriptions_url.to_json()
    _ => ()
  }
  match self.organizations_url {
    Some(organizations_url) => json["organizations_url"] = organizations_url.to_json()
    _ => ()
  }
  match self.repos_url {
    Some(repos_url) => json["repos_url"] = repos_url.to_json()
    _ => ()
  }
  match self.events_url {
    Some(events_url) => json["events_url"] = events_url.to_json()
    _ => ()
  }
  match self.received_events_url {
    Some(received_events_url) => json["received_events_url"] = received_events_url.to_json()
    _ => ()
  }
  match self.type_ {
    Some(type_) => json["type_"] = type_.to_json()
    _ => ()
  }
  match self.site_admin {
    Some(site_admin) => json["site_admin"] = site_admin.to_json()
    _ => ()
  }
  json.to_json()
}

pub impl @json.FromJson for ParentOwner with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "ParentOwner::from_json: expected object"),
      )
  }
  let login : String? = match json.get("login") {
    Some(String(login)) => Some(login)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:login expected String or Null"))
  }
  let id : Int? = match json.get("id") {
    Some(Number(id)) => Some(id.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:id expected Int or Null"))
  }
  let avatar_url : String? = match json.get("avatar_url") {
    Some(String(avatar_url)) => Some(avatar_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:avatar_url expected String or Null"))
  }
  let gravatar_id : String? = match json.get("gravatar_id") {
    Some(String(gravatar_id)) => Some(gravatar_id)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:gravatar_id expected String or Null"))
  }
  let url : String? = match json.get("url") {
    Some(String(url)) => Some(url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:url expected String or Null"))
  }
  let html_url : String? = match json.get("html_url") {
    Some(String(html_url)) => Some(html_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:html_url expected String or Null"))
  }
  let followers_url : String? = match json.get("followers_url") {
    Some(String(followers_url)) => Some(followers_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:followers_url expected String or Null"))
  }
  let following_url : String? = match json.get("following_url") {
    Some(String(following_url)) => Some(following_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:following_url expected String or Null"))
  }
  let gists_url : String? = match json.get("gists_url") {
    Some(String(gists_url)) => Some(gists_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:gists_url expected String or Null"))
  }
  let starred_url : String? = match json.get("starred_url") {
    Some(String(starred_url)) => Some(starred_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:starred_url expected String or Null"))
  }
  let subscriptions_url : String? = match json.get("subscriptions_url") {
    Some(String(subscriptions_url)) => Some(subscriptions_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:subscriptions_url expected String or Null"))
  }
  let organizations_url : String? = match json.get("organizations_url") {
    Some(String(organizations_url)) => Some(organizations_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:organizations_url expected String or Null"))
  }
  let repos_url : String? = match json.get("repos_url") {
    Some(String(repos_url)) => Some(repos_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:repos_url expected String or Null"))
  }
  let events_url : String? = match json.get("events_url") {
    Some(String(events_url)) => Some(events_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:events_url expected String or Null"))
  }
  let received_events_url : String? = match json.get("received_events_url") {
    Some(String(received_events_url)) => Some(received_events_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:received_events_url expected String or Null"))
  }
  let type_ : String? = match json.get("type") {
    Some(String(type_)) => Some(type_)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:type_ expected String or Null"))
  }
  let site_admin : Bool? = match json.get("site_admin") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentOwner::from_json:site_admin expected Bool or Null"))
  }
  {
    login,
    id,
    avatar_url,
    gravatar_id,
    url,
    html_url,
    followers_url,
    following_url,
    gists_url,
    starred_url,
    subscriptions_url,
    organizations_url,
    repos_url,
    events_url,
    received_events_url,
    type_,
    site_admin,
  }
}

pub struct ParentPermissions {
  admin : Bool?
  push : Bool?
  pull : Bool?
} derive(Show, Eq)

pub fn ParentPermissions::new() -> ParentPermissions {
  {
    admin: None,
    push: None,
    pull: None,
  }
}

pub fn to_json(self : ParentPermissions) -> Json {
  let json : Map[String, Json] = {}
  match self.admin {
    Some(admin) => json["admin"] = admin.to_json()
    _ => ()
  }
  match self.push {
    Some(push) => json["push"] = push.to_json()
    _ => ()
  }
  match self.pull {
    Some(pull) => json["pull"] = pull.to_json()
    _ => ()
  }
  json.to_json()
}

pub impl @json.FromJson for ParentPermissions with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "ParentPermissions::from_json: expected object"),
      )
  }
  let admin : Bool? = match json.get("admin") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentPermissions::from_json:admin expected Bool or Null"))
  }
  let push : Bool? = match json.get("push") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentPermissions::from_json:push expected Bool or Null"))
  }
  let pull : Bool? = match json.get("pull") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "ParentPermissions::from_json:pull expected Bool or Null"))
  }
  {
    admin,
    push,
    pull,
  }
}

pub struct Parent {
  id : Int?
  parent_owner : ParentOwner?
  name : String?
  full_name : String?
  description : String?
  private : Bool?
  fork : Bool?
  url : String?
  html_url : String?
  clone_url : String?
  git_url : String?
  ssh_url : String?
  svn_url : String?
  mirror_url : String?
  homepage : String?
  language : Json?
  forks_count : Int?
  stargazers_count : Int?
  watchers_count : Int?
  size : Int?
  default_branch : String?
  open_issues_count : Int?
  has_issues : Bool?
  has_wiki : Bool?
  has_downloads : Bool?
  pushed_at : String?
  created_at : String?
  updated_at : String?
  parent_permissions : ParentPermissions?
} derive(Show, Eq)

pub fn Parent::new() -> Parent {
  {
    id: None,
    parent_owner: None,
    name: None,
    full_name: None,
    description: None,
    private: None,
    fork: None,
    url: None,
    html_url: None,
    clone_url: None,
    git_url: None,
    ssh_url: None,
    svn_url: None,
    mirror_url: None,
    homepage: None,
    language: None,
    forks_count: None,
    stargazers_count: None,
    watchers_count: None,
    size: None,
    default_branch: None,
    open_issues_count: None,
    has_issues: None,
    has_wiki: None,
    has_downloads: None,
    pushed_at: None,
    created_at: None,
    updated_at: None,
    parent_permissions: None,
  }
}

pub fn to_json(self : Parent) -> Json {
  let json : Map[String, Json] = {}
  match self.id {
    Some(id) => json["id"] = id.to_json()
    _ => ()
  }
  match self.parent_owner {
    Some(parent_owner) => json["parent_owner"] = parent_owner.to_json()
    _ => ()
  }
  match self.name {
    Some(name) => json["name"] = name.to_json()
    _ => ()
  }
  match self.full_name {
    Some(full_name) => json["full_name"] = full_name.to_json()
    _ => ()
  }
  match self.description {
    Some(description) => json["description"] = description.to_json()
    _ => ()
  }
  match self.private {
    Some(private) => json["private"] = private.to_json()
    _ => ()
  }
  match self.fork {
    Some(fork) => json["fork"] = fork.to_json()
    _ => ()
  }
  match self.url {
    Some(url) => json["url"] = url.to_json()
    _ => ()
  }
  match self.html_url {
    Some(html_url) => json["html_url"] = html_url.to_json()
    _ => ()
  }
  match self.clone_url {
    Some(clone_url) => json["clone_url"] = clone_url.to_json()
    _ => ()
  }
  match self.git_url {
    Some(git_url) => json["git_url"] = git_url.to_json()
    _ => ()
  }
  match self.ssh_url {
    Some(ssh_url) => json["ssh_url"] = ssh_url.to_json()
    _ => ()
  }
  match self.svn_url {
    Some(svn_url) => json["svn_url"] = svn_url.to_json()
    _ => ()
  }
  match self.mirror_url {
    Some(mirror_url) => json["mirror_url"] = mirror_url.to_json()
    _ => ()
  }
  match self.homepage {
    Some(homepage) => json["homepage"] = homepage.to_json()
    _ => ()
  }
  match self.language {
    Some(language) => json["language"] = language.to_json()
    _ => ()
  }
  match self.forks_count {
    Some(forks_count) => json["forks_count"] = forks_count.to_json()
    _ => ()
  }
  match self.stargazers_count {
    Some(stargazers_count) => json["stargazers_count"] = stargazers_count.to_json()
    _ => ()
  }
  match self.watchers_count {
    Some(watchers_count) => json["watchers_count"] = watchers_count.to_json()
    _ => ()
  }
  match self.size {
    Some(size) => json["size"] = size.to_json()
    _ => ()
  }
  match self.default_branch {
    Some(default_branch) => json["default_branch"] = default_branch.to_json()
    _ => ()
  }
  match self.open_issues_count {
    Some(open_issues_count) => json["open_issues_count"] = open_issues_count.to_json()
    _ => ()
  }
  match self.has_issues {
    Some(has_issues) => json["has_issues"] = has_issues.to_json()
    _ => ()
  }
  match self.has_wiki {
    Some(has_wiki) => json["has_wiki"] = has_wiki.to_json()
    _ => ()
  }
  match self.has_downloads {
    Some(has_downloads) => json["has_downloads"] = has_downloads.to_json()
    _ => ()
  }
  match self.pushed_at {
    Some(pushed_at) => json["pushed_at"] = pushed_at.to_json()
    _ => ()
  }
  match self.created_at {
    Some(created_at) => json["created_at"] = created_at.to_json()
    _ => ()
  }
  match self.updated_at {
    Some(updated_at) => json["updated_at"] = updated_at.to_json()
    _ => ()
  }
  match self.parent_permissions {
    Some(parent_permissions) => json["parent_permissions"] = parent_permissions.to_json()
    _ => ()
  }
  json.to_json()
}

pub impl @json.FromJson for Parent with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Parent::from_json: expected object"),
      )
  }
  let id : Int? = match json.get("id") {
    Some(Number(id)) => Some(id.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:id expected Int or Null"))
  }
  let parent_owner : ParentOwner? = match json.get("owner") {
    Some(Object(parent_owner)) => Some(@json.from_json!(parent_owner.to_json()))
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:parent_owner expected ParentOwner or Null"))
  }
  let name : String? = match json.get("name") {
    Some(String(name)) => Some(name)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:name expected String or Null"))
  }
  let full_name : String? = match json.get("full_name") {
    Some(String(full_name)) => Some(full_name)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:full_name expected String or Null"))
  }
  let description : String? = match json.get("description") {
    Some(String(description)) => Some(description)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:description expected String or Null"))
  }
  let private : Bool? = match json.get("private") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:private expected Bool or Null"))
  }
  let fork : Bool? = match json.get("fork") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:fork expected Bool or Null"))
  }
  let url : String? = match json.get("url") {
    Some(String(url)) => Some(url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:url expected String or Null"))
  }
  let html_url : String? = match json.get("html_url") {
    Some(String(html_url)) => Some(html_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:html_url expected String or Null"))
  }
  let clone_url : String? = match json.get("clone_url") {
    Some(String(clone_url)) => Some(clone_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:clone_url expected String or Null"))
  }
  let git_url : String? = match json.get("git_url") {
    Some(String(git_url)) => Some(git_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:git_url expected String or Null"))
  }
  let ssh_url : String? = match json.get("ssh_url") {
    Some(String(ssh_url)) => Some(ssh_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:ssh_url expected String or Null"))
  }
  let svn_url : String? = match json.get("svn_url") {
    Some(String(svn_url)) => Some(svn_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:svn_url expected String or Null"))
  }
  let mirror_url : String? = match json.get("mirror_url") {
    Some(String(mirror_url)) => Some(mirror_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:mirror_url expected String or Null"))
  }
  let homepage : String? = match json.get("homepage") {
    Some(String(homepage)) => Some(homepage)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:homepage expected String or Null"))
  }
  let language : Json? = json.get("language")
  let forks_count : Int? = match json.get("forks_count") {
    Some(Number(forks_count)) => Some(forks_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:forks_count expected Int or Null"))
  }
  let stargazers_count : Int? = match json.get("stargazers_count") {
    Some(Number(stargazers_count)) => Some(stargazers_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:stargazers_count expected Int or Null"))
  }
  let watchers_count : Int? = match json.get("watchers_count") {
    Some(Number(watchers_count)) => Some(watchers_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:watchers_count expected Int or Null"))
  }
  let size : Int? = match json.get("size") {
    Some(Number(size)) => Some(size.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:size expected Int or Null"))
  }
  let default_branch : String? = match json.get("default_branch") {
    Some(String(default_branch)) => Some(default_branch)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:default_branch expected String or Null"))
  }
  let open_issues_count : Int? = match json.get("open_issues_count") {
    Some(Number(open_issues_count)) => Some(open_issues_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:open_issues_count expected Int or Null"))
  }
  let has_issues : Bool? = match json.get("has_issues") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:has_issues expected Bool or Null"))
  }
  let has_wiki : Bool? = match json.get("has_wiki") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:has_wiki expected Bool or Null"))
  }
  let has_downloads : Bool? = match json.get("has_downloads") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:has_downloads expected Bool or Null"))
  }
  let pushed_at : String? = match json.get("pushed_at") {
    Some(String(pushed_at)) => Some(pushed_at)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:pushed_at expected String or Null"))
  }
  let created_at : String? = match json.get("created_at") {
    Some(String(created_at)) => Some(created_at)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:created_at expected String or Null"))
  }
  let updated_at : String? = match json.get("updated_at") {
    Some(String(updated_at)) => Some(updated_at)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:updated_at expected String or Null"))
  }
  let parent_permissions : ParentPermissions? = match json.get("permissions") {
    Some(Object(parent_permissions)) => Some(@json.from_json!(parent_permissions.to_json()))
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Parent::from_json:parent_permissions expected ParentPermissions or Null"))
  }
  {
    id,
    parent_owner,
    name,
    full_name,
    description,
    private,
    fork,
    url,
    html_url,
    clone_url,
    git_url,
    ssh_url,
    svn_url,
    mirror_url,
    homepage,
    language,
    forks_count,
    stargazers_count,
    watchers_count,
    size,
    default_branch,
    open_issues_count,
    has_issues,
    has_wiki,
    has_downloads,
    pushed_at,
    created_at,
    updated_at,
    parent_permissions,
  }
}

pub struct SourceOwner {
  login : String?
  id : Int?
  avatar_url : String?
  gravatar_id : String?
  url : String?
  html_url : String?
  followers_url : String?
  following_url : String?
  gists_url : String?
  starred_url : String?
  subscriptions_url : String?
  organizations_url : String?
  repos_url : String?
  events_url : String?
  received_events_url : String?
  type_ : String?
  site_admin : Bool?
} derive(Show, Eq)

pub fn SourceOwner::new() -> SourceOwner {
  {
    login: None,
    id: None,
    avatar_url: None,
    gravatar_id: None,
    url: None,
    html_url: None,
    followers_url: None,
    following_url: None,
    gists_url: None,
    starred_url: None,
    subscriptions_url: None,
    organizations_url: None,
    repos_url: None,
    events_url: None,
    received_events_url: None,
    type_: None,
    site_admin: None,
  }
}

pub fn to_json(self : SourceOwner) -> Json {
  let json : Map[String, Json] = {}
  match self.login {
    Some(login) => json["login"] = login.to_json()
    _ => ()
  }
  match self.id {
    Some(id) => json["id"] = id.to_json()
    _ => ()
  }
  match self.avatar_url {
    Some(avatar_url) => json["avatar_url"] = avatar_url.to_json()
    _ => ()
  }
  match self.gravatar_id {
    Some(gravatar_id) => json["gravatar_id"] = gravatar_id.to_json()
    _ => ()
  }
  match self.url {
    Some(url) => json["url"] = url.to_json()
    _ => ()
  }
  match self.html_url {
    Some(html_url) => json["html_url"] = html_url.to_json()
    _ => ()
  }
  match self.followers_url {
    Some(followers_url) => json["followers_url"] = followers_url.to_json()
    _ => ()
  }
  match self.following_url {
    Some(following_url) => json["following_url"] = following_url.to_json()
    _ => ()
  }
  match self.gists_url {
    Some(gists_url) => json["gists_url"] = gists_url.to_json()
    _ => ()
  }
  match self.starred_url {
    Some(starred_url) => json["starred_url"] = starred_url.to_json()
    _ => ()
  }
  match self.subscriptions_url {
    Some(subscriptions_url) => json["subscriptions_url"] = subscriptions_url.to_json()
    _ => ()
  }
  match self.organizations_url {
    Some(organizations_url) => json["organizations_url"] = organizations_url.to_json()
    _ => ()
  }
  match self.repos_url {
    Some(repos_url) => json["repos_url"] = repos_url.to_json()
    _ => ()
  }
  match self.events_url {
    Some(events_url) => json["events_url"] = events_url.to_json()
    _ => ()
  }
  match self.received_events_url {
    Some(received_events_url) => json["received_events_url"] = received_events_url.to_json()
    _ => ()
  }
  match self.type_ {
    Some(type_) => json["type_"] = type_.to_json()
    _ => ()
  }
  match self.site_admin {
    Some(site_admin) => json["site_admin"] = site_admin.to_json()
    _ => ()
  }
  json.to_json()
}

pub impl @json.FromJson for SourceOwner with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "SourceOwner::from_json: expected object"),
      )
  }
  let login : String? = match json.get("login") {
    Some(String(login)) => Some(login)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:login expected String or Null"))
  }
  let id : Int? = match json.get("id") {
    Some(Number(id)) => Some(id.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:id expected Int or Null"))
  }
  let avatar_url : String? = match json.get("avatar_url") {
    Some(String(avatar_url)) => Some(avatar_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:avatar_url expected String or Null"))
  }
  let gravatar_id : String? = match json.get("gravatar_id") {
    Some(String(gravatar_id)) => Some(gravatar_id)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:gravatar_id expected String or Null"))
  }
  let url : String? = match json.get("url") {
    Some(String(url)) => Some(url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:url expected String or Null"))
  }
  let html_url : String? = match json.get("html_url") {
    Some(String(html_url)) => Some(html_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:html_url expected String or Null"))
  }
  let followers_url : String? = match json.get("followers_url") {
    Some(String(followers_url)) => Some(followers_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:followers_url expected String or Null"))
  }
  let following_url : String? = match json.get("following_url") {
    Some(String(following_url)) => Some(following_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:following_url expected String or Null"))
  }
  let gists_url : String? = match json.get("gists_url") {
    Some(String(gists_url)) => Some(gists_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:gists_url expected String or Null"))
  }
  let starred_url : String? = match json.get("starred_url") {
    Some(String(starred_url)) => Some(starred_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:starred_url expected String or Null"))
  }
  let subscriptions_url : String? = match json.get("subscriptions_url") {
    Some(String(subscriptions_url)) => Some(subscriptions_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:subscriptions_url expected String or Null"))
  }
  let organizations_url : String? = match json.get("organizations_url") {
    Some(String(organizations_url)) => Some(organizations_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:organizations_url expected String or Null"))
  }
  let repos_url : String? = match json.get("repos_url") {
    Some(String(repos_url)) => Some(repos_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:repos_url expected String or Null"))
  }
  let events_url : String? = match json.get("events_url") {
    Some(String(events_url)) => Some(events_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:events_url expected String or Null"))
  }
  let received_events_url : String? = match json.get("received_events_url") {
    Some(String(received_events_url)) => Some(received_events_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:received_events_url expected String or Null"))
  }
  let type_ : String? = match json.get("type") {
    Some(String(type_)) => Some(type_)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:type_ expected String or Null"))
  }
  let site_admin : Bool? = match json.get("site_admin") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourceOwner::from_json:site_admin expected Bool or Null"))
  }
  {
    login,
    id,
    avatar_url,
    gravatar_id,
    url,
    html_url,
    followers_url,
    following_url,
    gists_url,
    starred_url,
    subscriptions_url,
    organizations_url,
    repos_url,
    events_url,
    received_events_url,
    type_,
    site_admin,
  }
}

pub struct SourcePermissions {
  admin : Bool?
  push : Bool?
  pull : Bool?
} derive(Show, Eq)

pub fn SourcePermissions::new() -> SourcePermissions {
  {
    admin: None,
    push: None,
    pull: None,
  }
}

pub fn to_json(self : SourcePermissions) -> Json {
  let json : Map[String, Json] = {}
  match self.admin {
    Some(admin) => json["admin"] = admin.to_json()
    _ => ()
  }
  match self.push {
    Some(push) => json["push"] = push.to_json()
    _ => ()
  }
  match self.pull {
    Some(pull) => json["pull"] = pull.to_json()
    _ => ()
  }
  json.to_json()
}

pub impl @json.FromJson for SourcePermissions with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "SourcePermissions::from_json: expected object"),
      )
  }
  let admin : Bool? = match json.get("admin") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourcePermissions::from_json:admin expected Bool or Null"))
  }
  let push : Bool? = match json.get("push") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourcePermissions::from_json:push expected Bool or Null"))
  }
  let pull : Bool? = match json.get("pull") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "SourcePermissions::from_json:pull expected Bool or Null"))
  }
  {
    admin,
    push,
    pull,
  }
}

pub struct Source {
  id : Int?
  source_owner : SourceOwner?
  name : String?
  full_name : String?
  description : String?
  private : Bool?
  fork : Bool?
  url : String?
  html_url : String?
  clone_url : String?
  git_url : String?
  ssh_url : String?
  svn_url : String?
  mirror_url : String?
  homepage : String?
  language : Json?
  forks_count : Int?
  stargazers_count : Int?
  watchers_count : Int?
  size : Int?
  default_branch : String?
  open_issues_count : Int?
  has_issues : Bool?
  has_wiki : Bool?
  has_downloads : Bool?
  pushed_at : String?
  created_at : String?
  updated_at : String?
  source_permissions : SourcePermissions?
} derive(Show, Eq)

pub fn Source::new() -> Source {
  {
    id: None,
    source_owner: None,
    name: None,
    full_name: None,
    description: None,
    private: None,
    fork: None,
    url: None,
    html_url: None,
    clone_url: None,
    git_url: None,
    ssh_url: None,
    svn_url: None,
    mirror_url: None,
    homepage: None,
    language: None,
    forks_count: None,
    stargazers_count: None,
    watchers_count: None,
    size: None,
    default_branch: None,
    open_issues_count: None,
    has_issues: None,
    has_wiki: None,
    has_downloads: None,
    pushed_at: None,
    created_at: None,
    updated_at: None,
    source_permissions: None,
  }
}

pub fn to_json(self : Source) -> Json {
  let json : Map[String, Json] = {}
  match self.id {
    Some(id) => json["id"] = id.to_json()
    _ => ()
  }
  match self.source_owner {
    Some(source_owner) => json["source_owner"] = source_owner.to_json()
    _ => ()
  }
  match self.name {
    Some(name) => json["name"] = name.to_json()
    _ => ()
  }
  match self.full_name {
    Some(full_name) => json["full_name"] = full_name.to_json()
    _ => ()
  }
  match self.description {
    Some(description) => json["description"] = description.to_json()
    _ => ()
  }
  match self.private {
    Some(private) => json["private"] = private.to_json()
    _ => ()
  }
  match self.fork {
    Some(fork) => json["fork"] = fork.to_json()
    _ => ()
  }
  match self.url {
    Some(url) => json["url"] = url.to_json()
    _ => ()
  }
  match self.html_url {
    Some(html_url) => json["html_url"] = html_url.to_json()
    _ => ()
  }
  match self.clone_url {
    Some(clone_url) => json["clone_url"] = clone_url.to_json()
    _ => ()
  }
  match self.git_url {
    Some(git_url) => json["git_url"] = git_url.to_json()
    _ => ()
  }
  match self.ssh_url {
    Some(ssh_url) => json["ssh_url"] = ssh_url.to_json()
    _ => ()
  }
  match self.svn_url {
    Some(svn_url) => json["svn_url"] = svn_url.to_json()
    _ => ()
  }
  match self.mirror_url {
    Some(mirror_url) => json["mirror_url"] = mirror_url.to_json()
    _ => ()
  }
  match self.homepage {
    Some(homepage) => json["homepage"] = homepage.to_json()
    _ => ()
  }
  match self.language {
    Some(language) => json["language"] = language.to_json()
    _ => ()
  }
  match self.forks_count {
    Some(forks_count) => json["forks_count"] = forks_count.to_json()
    _ => ()
  }
  match self.stargazers_count {
    Some(stargazers_count) => json["stargazers_count"] = stargazers_count.to_json()
    _ => ()
  }
  match self.watchers_count {
    Some(watchers_count) => json["watchers_count"] = watchers_count.to_json()
    _ => ()
  }
  match self.size {
    Some(size) => json["size"] = size.to_json()
    _ => ()
  }
  match self.default_branch {
    Some(default_branch) => json["default_branch"] = default_branch.to_json()
    _ => ()
  }
  match self.open_issues_count {
    Some(open_issues_count) => json["open_issues_count"] = open_issues_count.to_json()
    _ => ()
  }
  match self.has_issues {
    Some(has_issues) => json["has_issues"] = has_issues.to_json()
    _ => ()
  }
  match self.has_wiki {
    Some(has_wiki) => json["has_wiki"] = has_wiki.to_json()
    _ => ()
  }
  match self.has_downloads {
    Some(has_downloads) => json["has_downloads"] = has_downloads.to_json()
    _ => ()
  }
  match self.pushed_at {
    Some(pushed_at) => json["pushed_at"] = pushed_at.to_json()
    _ => ()
  }
  match self.created_at {
    Some(created_at) => json["created_at"] = created_at.to_json()
    _ => ()
  }
  match self.updated_at {
    Some(updated_at) => json["updated_at"] = updated_at.to_json()
    _ => ()
  }
  match self.source_permissions {
    Some(source_permissions) => json["source_permissions"] = source_permissions.to_json()
    _ => ()
  }
  json.to_json()
}

pub impl @json.FromJson for Source with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Source::from_json: expected object"),
      )
  }
  let id : Int? = match json.get("id") {
    Some(Number(id)) => Some(id.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:id expected Int or Null"))
  }
  let source_owner : SourceOwner? = match json.get("owner") {
    Some(Object(source_owner)) => Some(@json.from_json!(source_owner.to_json()))
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:source_owner expected SourceOwner or Null"))
  }
  let name : String? = match json.get("name") {
    Some(String(name)) => Some(name)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:name expected String or Null"))
  }
  let full_name : String? = match json.get("full_name") {
    Some(String(full_name)) => Some(full_name)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:full_name expected String or Null"))
  }
  let description : String? = match json.get("description") {
    Some(String(description)) => Some(description)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:description expected String or Null"))
  }
  let private : Bool? = match json.get("private") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:private expected Bool or Null"))
  }
  let fork : Bool? = match json.get("fork") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:fork expected Bool or Null"))
  }
  let url : String? = match json.get("url") {
    Some(String(url)) => Some(url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:url expected String or Null"))
  }
  let html_url : String? = match json.get("html_url") {
    Some(String(html_url)) => Some(html_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:html_url expected String or Null"))
  }
  let clone_url : String? = match json.get("clone_url") {
    Some(String(clone_url)) => Some(clone_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:clone_url expected String or Null"))
  }
  let git_url : String? = match json.get("git_url") {
    Some(String(git_url)) => Some(git_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:git_url expected String or Null"))
  }
  let ssh_url : String? = match json.get("ssh_url") {
    Some(String(ssh_url)) => Some(ssh_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:ssh_url expected String or Null"))
  }
  let svn_url : String? = match json.get("svn_url") {
    Some(String(svn_url)) => Some(svn_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:svn_url expected String or Null"))
  }
  let mirror_url : String? = match json.get("mirror_url") {
    Some(String(mirror_url)) => Some(mirror_url)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:mirror_url expected String or Null"))
  }
  let homepage : String? = match json.get("homepage") {
    Some(String(homepage)) => Some(homepage)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:homepage expected String or Null"))
  }
  let language : Json? = json.get("language")
  let forks_count : Int? = match json.get("forks_count") {
    Some(Number(forks_count)) => Some(forks_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:forks_count expected Int or Null"))
  }
  let stargazers_count : Int? = match json.get("stargazers_count") {
    Some(Number(stargazers_count)) => Some(stargazers_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:stargazers_count expected Int or Null"))
  }
  let watchers_count : Int? = match json.get("watchers_count") {
    Some(Number(watchers_count)) => Some(watchers_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:watchers_count expected Int or Null"))
  }
  let size : Int? = match json.get("size") {
    Some(Number(size)) => Some(size.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:size expected Int or Null"))
  }
  let default_branch : String? = match json.get("default_branch") {
    Some(String(default_branch)) => Some(default_branch)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:default_branch expected String or Null"))
  }
  let open_issues_count : Int? = match json.get("open_issues_count") {
    Some(Number(open_issues_count)) => Some(open_issues_count.to_int())
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:open_issues_count expected Int or Null"))
  }
  let has_issues : Bool? = match json.get("has_issues") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:has_issues expected Bool or Null"))
  }
  let has_wiki : Bool? = match json.get("has_wiki") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:has_wiki expected Bool or Null"))
  }
  let has_downloads : Bool? = match json.get("has_downloads") {
    Some(True) => Some(true)
    Some(False) => Some(false)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:has_downloads expected Bool or Null"))
  }
  let pushed_at : String? = match json.get("pushed_at") {
    Some(String(pushed_at)) => Some(pushed_at)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:pushed_at expected String or Null"))
  }
  let created_at : String? = match json.get("created_at") {
    Some(String(created_at)) => Some(created_at)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:created_at expected String or Null"))
  }
  let updated_at : String? = match json.get("updated_at") {
    Some(String(updated_at)) => Some(updated_at)
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:updated_at expected String or Null"))
  }
  let source_permissions : SourcePermissions? = match json.get("permissions") {
    Some(Object(source_permissions)) => Some(@json.from_json!(source_permissions.to_json()))
    Some(Null) | None => None
    _ => raise @json.JsonDecodeError((path, "Source::from_json:source_permissions expected SourcePermissions or Null"))
  }
  {
    id,
    source_owner,
    name,
    full_name,
    description,
    private,
    fork,
    url,
    html_url,
    clone_url,
    git_url,
    ssh_url,
    svn_url,
    mirror_url,
    homepage,
    language,
    forks_count,
    stargazers_count,
    watchers_count,
    size,
    default_branch,
    open_issues_count,
    has_issues,
    has_wiki,
    has_downloads,
    pushed_at,
    created_at,
    updated_at,
    source_permissions,
  }
}
