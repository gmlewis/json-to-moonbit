pub struct AutoGenerated {
  id : Int?
  // owner : Owner?
  name : String?
  full_name : String?
  description : String?
  private : Bool?
  fork : Bool?
  url : String?
  html_url : String?
  clone_url : String?
  git_url : String?
  ssh_url : String?
  svn_url : String?
  mirror_url : String?
  homepage : String?
  language : Json
  forks_count : Int?
  stargazers_count : Int?
  watchers_count : Int?
  size : Int?
  default_branch : String?
  open_issues_count : Int?
  has_issues : Bool?
  has_wiki : Bool?
  has_downloads : Bool?
  pushed_at : String? // Time?
  created_at : String? // Time?
  updated_at : String? // Time?
  // permissions : Permissions?
  subscribers_count : Int?
  // organization : Organization?
  // parent : Parent?
  // source : Source?
} derive(Show, Eq)

pub fn AutoGenerated::new() -> AutoGenerated {
  {
    id: None,
    // owner : None,
    name: None,
    full_name: None,
    description: None,
    private: None,
    fork: None,
    url: None,
    html_url: None,
    clone_url: None,
    git_url: None,
    ssh_url: None,
    svn_url: None,
    mirror_url: None,
    homepage: None,
    language: Null,
    forks_count: None,
    stargazers_count: None,
    watchers_count: None,
    size: None,
    default_branch: None,
    open_issues_count: None,
    has_issues: None,
    has_wiki: None,
    has_downloads: None,
    pushed_at: None,
    created_at: None,
    updated_at: None,
    // permissions : None,
    subscribers_count: None,
    // organization : None,
    // parent : None,
    // source : None,
  }
}

pub fn to_json(self : AutoGenerated) -> Json {
  let json : Map[String, Json] = { "language": self.language }
  match self.id {
    Some(id) => json["id"] = id.to_json()
    _ => ()
  }
  // match self.owner {
  //   Some(owner) => json["owner"] = owner.to_json()
  //   _ => ()
  // }
  match self.name {
    Some(name) => json["name"] = name.to_json()
    _ => ()
  }
  match self.full_name {
    Some(full_name) => json["full_name"] = full_name.to_json()
    _ => ()
  }
  match self.description {
    Some(description) => json["description"] = description.to_json()
    _ => ()
  }
  match self.private {
    Some(private) => json["private"] = private.to_json()
    _ => ()
  }
  match self.fork {
    Some(fork) => json["fork"] = fork.to_json()
    _ => ()
  }
  match self.url {
    Some(url) => json["url"] = url.to_json()
    _ => ()
  }
  match self.html_url {
    Some(html_url) => json["html_url"] = html_url.to_json()
    _ => ()
  }
  match self.clone_url {
    Some(clone_url) => json["clone_url"] = clone_url.to_json()
    _ => ()
  }
  match self.git_url {
    Some(git_url) => json["git_url"] = git_url.to_json()
    _ => ()
  }
  match self.ssh_url {
    Some(ssh_url) => json["ssh_url"] = ssh_url.to_json()
    _ => ()
  }
  match self.svn_url {
    Some(svn_url) => json["svn_url"] = svn_url.to_json()
    _ => ()
  }
  match self.mirror_url {
    Some(mirror_url) => json["mirror_url"] = mirror_url.to_json()
    _ => ()
  }
  match self.homepage {
    Some(homepage) => json["homepage"] = homepage.to_json()
    _ => ()
  }
  match self.forks_count {
    Some(forks_count) => json["forks_count"] = forks_count.to_json()
    _ => ()
  }
  match self.stargazers_count {
    Some(stargazers_count) =>
      json["stargazers_count"] = stargazers_count.to_json()
    _ => ()
  }
  match self.watchers_count {
    Some(watchers_count) => json["watchers_count"] = watchers_count.to_json()
    _ => ()
  }
  match self.size {
    Some(size) => json["size"] = size.to_json()
    _ => ()
  }
  match self.default_branch {
    Some(default_branch) => json["default_branch"] = default_branch.to_json()
    _ => ()
  }
  match self.open_issues_count {
    Some(open_issues_count) =>
      json["open_issues_count"] = open_issues_count.to_json()
    _ => ()
  }
  match self.has_issues {
    Some(has_issues) => json["has_issues"] = has_issues.to_json()
    _ => ()
  }
  match self.has_wiki {
    Some(has_wiki) => json["has_wiki"] = has_wiki.to_json()
    _ => ()
  }
  match self.has_downloads {
    Some(has_downloads) => json["has_downloads"] = has_downloads.to_json()
    _ => ()
  }
  match self.pushed_at {
    Some(pushed_at) => json["pushed_at"] = pushed_at.to_json()
    _ => ()
  }
  match self.created_at {
    Some(created_at) => json["created_at"] = created_at.to_json()
    _ => ()
  }
  match self.updated_at {
    Some(updated_at) => json["updated_at"] = updated_at.to_json()
    _ => ()
  }
  // match self.permissions {
  //   Some(permissions) => json["permissions"] = permissions.to_json()
  //   _ => ()
  // }
  match self.subscribers_count {
    Some(subscribers_count) =>
      json["subscribers_count"] = subscribers_count.to_json()
    _ => ()
  }
  // match self.organization {
  //   Some(organization) => json["organization"] = organization.to_json()
  //   _ => ()
  // }
  // match self.parent {
  //   Some(parent) => json["parent"] = parent.to_json()
  //   _ => ()
  // }
  // match self.source {
  //   Some(source) => json["source"] = source.to_json()
  //   _ => ()
  // }
  json.to_json()
}

pub impl @json.FromJson for AutoGenerated with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "AutoGenerated::from_json: expected object"),
      )
  }
  let id : Int? = match json.get("id") {
    Some(Number(id)) => Some(id.to_int())
    _ => None
  }
  // let owner : Owner? = @json.from_json!(owner)
  let name : String? = match json.get("name") {
    Some(String(name)) => Some(name)
    _ => None
  }
  let full_name : String? = match json.get("full_name") {
    Some(String(full_name)) => Some(full_name)
    _ => None
  }
  let description : String? = match json.get("description") {
    Some(String(description)) => Some(description)
    _ => None
  }
  let private : Bool? = match json.get("private") {
    Some(private) => private.as_bool()
    _ => None
  }
  let fork : Bool? = match json.get("fork") {
    Some(fork) => fork.as_bool()
    _ => None
  }
  let url : String? = match json.get("url") {
    Some(String(url)) => Some(url)
    _ => None
  }
  let html_url : String? = match json.get("html_url") {
    Some(String(html_url)) => Some(html_url)
    _ => None
  }
  let clone_url : String? = match json.get("clone_url") {
    Some(String(clone_url)) => Some(clone_url)
    _ => None
  }
  let git_url : String? = match json.get("git_url") {
    Some(String(git_url)) => Some(git_url)
    _ => None
  }
  let ssh_url : String? = match json.get("ssh_url") {
    Some(String(ssh_url)) => Some(ssh_url)
    _ => None
  }
  let svn_url : String? = match json.get("svn_url") {
    Some(String(svn_url)) => Some(svn_url)
    _ => None
  }
  let mirror_url : String? = match json.get("mirror_url") {
    Some(String(mirror_url)) => Some(mirror_url)
    _ => None
  }
  let homepage : String? = match json.get("homepage") {
    Some(String(homepage)) => Some(homepage)
    _ => None
  }
  let language : Json = match json.get("language") {
    Some(language) => language
    _ => Null
  }
  let forks_count : Int? = match json.get("forks_count") {
    Some(Number(forks_count)) => Some(forks_count.to_int())
    _ => None
  }
  let stargazers_count : Int? = match json.get("stargazers_count") {
    Some(Number(stargazers_count)) => Some(stargazers_count.to_int())
    _ => None
  }
  let watchers_count : Int? = match json.get("watchers_count") {
    Some(Number(watchers_count)) => Some(watchers_count.to_int())
    _ => None
  }
  let size : Int? = match json.get("size") {
    Some(Number(size)) => Some(size.to_int())
    _ => None
  }
  let default_branch : String? = match json.get("default_branch") {
    Some(String(default_branch)) => Some(default_branch)
    _ => None
  }
  let open_issues_count : Int? = match json.get("open_issues_count") {
    Some(Number(open_issues_count)) => Some(open_issues_count.to_int())
    _ => None
  }
  let has_issues : Bool? = match json.get("has_issues") {
    Some(has_issues) => has_issues.as_bool()
    _ => None
  }
  let has_wiki : Bool? = match json.get("has_wiki") {
    Some(has_wiki) => has_wiki.as_bool()
    _ => None
  }
  let has_downloads : Bool? = match json.get("has_downloads") {
    Some(has_downloads) => has_downloads.as_bool()
    _ => None
  }
  let pushed_at : String? = match json.get("pushed_at") {
    Some(String(pushed_at)) => Some(pushed_at)
    _ => None
  }
  let created_at : String? = match json.get("created_at") {
    Some(String(created_at)) => Some(created_at)
    _ => None
  }
  let updated_at : String? = match json.get("updated_at") {
    Some(String(updated_at)) => Some(updated_at)
    _ => None
  }
  // let permissions : Permissions = @json.from_json!(permissions)
  let subscribers_count : Int? = match json.get("subscribers_count") {
    Some(Number(subscribers_count)) => Some(subscribers_count.to_int())
    _ => None
  }
  // let organization : Organization = @json.from_json!(organization)
  // let parent : Parent = @json.from_json!(parent)
  // let source : Source = @json.from_json!(source)
  {
    id,
    // owner,
    name,
    full_name,
    description,
    private,
    fork,
    url,
    html_url,
    clone_url,
    git_url,
    ssh_url,
    svn_url,
    mirror_url,
    homepage,
    language,
    forks_count,
    stargazers_count,
    watchers_count,
    size,
    default_branch,
    open_issues_count,
    has_issues,
    has_wiki,
    has_downloads,
    pushed_at,
    created_at,
    updated_at,
    // permissions,
    subscribers_count,
    // organization,
    // parent,
    // source,
  }
}

// pub struct Owner {
//   login : String?
//   id : Int?
//   avatar_url : String?
//   gravatar_id : String?
//   url : String?
//   html_url : String?
//   followers_url : String?
//   following_url : String?
//   gists_url : String?
//   starred_url : String?
//   subscriptions_url : String?
//   organizations_url : String?
//   repos_url : String?
//   events_url : String?
//   received_events_url : String?
//   type_ : String?
//   site_admin : Bool?
// } derive(Show, Eq)
//
// pub fn to_json(self : Owner) -> Json {
//   {
//     "login": self.login.to_json(),
//     "id": self.id.to_json(),
//     "avatar_url": self.avatar_url.to_json(),
//     "gravatar_id": self.gravatar_id.to_json(),
//     "url": self.url.to_json(),
//     "html_url": self.html_url.to_json(),
//     "followers_url": self.followers_url.to_json(),
//     "following_url": self.following_url.to_json(),
//     "gists_url": self.gists_url.to_json(),
//     "starred_url": self.starred_url.to_json(),
//     "subscriptions_url": self.subscriptions_url.to_json(),
//     "organizations_url": self.organizations_url.to_json(),
//     "repos_url": self.repos_url.to_json(),
//     "events_url": self.events_url.to_json(),
//     "received_events_url": self.received_events_url.to_json(),
//     "type": self.type_.to_json(),
//     "site_admin": self.site_admin.to_json(),
//   }
// }
//
// pub impl @json.FromJson for Owner with from_json(json, path) {
//   match json {
//     {
//       "login": String(login),
//       "id": Number(id),
//       "avatar_url": String(avatar_url),
//       "gravatar_id": String(gravatar_id),
//       "url": String(url),
//       "html_url": String(html_url),
//       "followers_url": String(followers_url),
//       "following_url": String(following_url),
//       "gists_url": String(gists_url),
//       "starred_url": String(starred_url),
//       "subscriptions_url": String(subscriptions_url),
//       "organizations_url": String(organizations_url),
//       "repos_url": String(repos_url),
//       "events_url": String(events_url),
//       "received_events_url": String(received_events_url),
//       "type": String(type_),
//       "site_admin": site_admin,
//     } => {
//       let id = match id {
//         Number(id) => Some(id.to_int())
//         _ => None
//       }
//       let site_admin = site_admin
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       {
//         login,
//         id,
//         avatar_url,
//         gravatar_id,
//         url,
//         html_url,
//         followers_url,
//         following_url,
//         gists_url,
//         starred_url,
//         subscriptions_url,
//         organizations_url,
//         repos_url,
//         events_url,
//         received_events_url,
//         type_,
//         site_admin,
//       }
//     }
//     _ =>
//       raise @json.JsonDecodeError((path, "Owner::from_json: expected object"))
//   }
// }
//
// pub struct Permissions {
//   admin : Bool?
//   push : Bool?
//   pull : Bool?
// } derive(Show, Eq, ToJson)
//
// pub impl @json.FromJson for Permissions with from_json(json, path) {
//   match json {
//     { "admin": admin, "push": push, "pull": pull } => {
//       let admin = admin
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let push = push
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let pull = pull
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       { admin, push, pull }
//     }
//     _ =>
//       raise @json.JsonDecodeError(
//         (path, "Permissions::from_json: expected object"),
//       )
//   }
// }
//
// pub struct Organization {
//   login : String?
//   id : Int?
//   avatar_url : String?
//   gravatar_id : String?
//   url : String?
//   html_url : String?
//   followers_url : String?
//   following_url : String?
//   gists_url : String?
//   starred_url : String?
//   subscriptions_url : String?
//   organizations_url : String?
//   repos_url : String?
//   events_url : String?
//   received_events_url : String?
//   type_ : String?
//   site_admin : Bool?
// } derive(Show, Eq)
//
// pub fn to_json(self : Organization) -> Json {
//   {
//     "login": self.login.to_json(),
//     "id": self.id.to_json(),
//     "avatar_url": self.avatar_url.to_json(),
//     "gravatar_id": self.gravatar_id.to_json(),
//     "url": self.url.to_json(),
//     "html_url": self.html_url.to_json(),
//     "followers_url": self.followers_url.to_json(),
//     "following_url": self.following_url.to_json(),
//     "gists_url": self.gists_url.to_json(),
//     "starred_url": self.starred_url.to_json(),
//     "subscriptions_url": self.subscriptions_url.to_json(),
//     "organizations_url": self.organizations_url.to_json(),
//     "repos_url": self.repos_url.to_json(),
//     "events_url": self.events_url.to_json(),
//     "received_events_url": self.received_events_url.to_json(),
//     "type": self.type_.to_json(),
//     "site_admin": self.site_admin.to_json(),
//   }
// }
//
// pub impl @json.FromJson for Organization with from_json(json, path) {
//   match json {
//     {
//       "login": String(login),
//       "id": Number(id),
//       "avatar_url": String(avatar_url),
//       "gravatar_id": String(gravatar_id),
//       "url": String(url),
//       "html_url": String(html_url),
//       "followers_url": String(followers_url),
//       "following_url": String(following_url),
//       "gists_url": String(gists_url),
//       "starred_url": String(starred_url),
//       "subscriptions_url": String(subscriptions_url),
//       "organizations_url": String(organizations_url),
//       "repos_url": String(repos_url),
//       "events_url": String(events_url),
//       "received_events_url": String(received_events_url),
//       "type": String(type_),
//       "site_admin": site_admin,
//     } => {
//       let id = match id {
//         Number(id) => Some(id.to_int())
//         _ => None
//       }
//       let site_admin = site_admin
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       {
//         login,
//         id,
//         avatar_url,
//         gravatar_id,
//         url,
//         html_url,
//         followers_url,
//         following_url,
//         gists_url,
//         starred_url,
//         subscriptions_url,
//         organizations_url,
//         repos_url,
//         events_url,
//         received_events_url,
//         type_,
//         site_admin,
//       }
//     }
//     _ =>
//       raise @json.JsonDecodeError(
//         (path, "Organization::from_json: expected object"),
//       )
//   }
// }
//
// pub struct ParentOwner {
//   login : String?
//   id : Int?
//   avatar_url : String?
//   gravatar_id : String?
//   url : String?
//   html_url : String?
//   followers_url : String?
//   following_url : String?
//   gists_url : String?
//   starred_url : String?
//   subscriptions_url : String?
//   organizations_url : String?
//   repos_url : String?
//   events_url : String?
//   received_events_url : String?
//   type_ : String?
//   site_admin : Bool?
// } derive(Show, Eq)
//
// pub fn to_json(self : ParentOwner) -> Json {
//   {
//     "login": self.login.to_json(),
//     "id": self.id.to_json(),
//     "avatar_url": self.avatar_url.to_json(),
//     "gravatar_id": self.gravatar_id.to_json(),
//     "url": self.url.to_json(),
//     "html_url": self.html_url.to_json(),
//     "followers_url": self.followers_url.to_json(),
//     "following_url": self.following_url.to_json(),
//     "gists_url": self.gists_url.to_json(),
//     "starred_url": self.starred_url.to_json(),
//     "subscriptions_url": self.subscriptions_url.to_json(),
//     "organizations_url": self.organizations_url.to_json(),
//     "repos_url": self.repos_url.to_json(),
//     "events_url": self.events_url.to_json(),
//     "received_events_url": self.received_events_url.to_json(),
//     "type": self.type_.to_json(),
//     "site_admin": self.site_admin.to_json(),
//   }
// }
//
// pub impl @json.FromJson for ParentOwner with from_json(json, path) {
//   match json {
//     {
//       "login": String(login),
//       "id": Number(id),
//       "avatar_url": String(avatar_url),
//       "gravatar_id": String(gravatar_id),
//       "url": String(url),
//       "html_url": String(html_url),
//       "followers_url": String(followers_url),
//       "following_url": String(following_url),
//       "gists_url": String(gists_url),
//       "starred_url": String(starred_url),
//       "subscriptions_url": String(subscriptions_url),
//       "organizations_url": String(organizations_url),
//       "repos_url": String(repos_url),
//       "events_url": String(events_url),
//       "received_events_url": String(received_events_url),
//       "type": String(type_),
//       "site_admin": site_admin,
//     } => {
//       let id = match id {
//         Number(id) => Some(id.to_int())
//         _ => None
//       }
//       let site_admin = site_admin
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       {
//         login,
//         id,
//         avatar_url,
//         gravatar_id,
//         url,
//         html_url,
//         followers_url,
//         following_url,
//         gists_url,
//         starred_url,
//         subscriptions_url,
//         organizations_url,
//         repos_url,
//         events_url,
//         received_events_url,
//         type_,
//         site_admin,
//       }
//     }
//     _ =>
//       raise @json.JsonDecodeError(
//         (path, "ParentOwner::from_json: expected object"),
//       )
//   }
// }
//
// pub struct ParentPermissions {
//   admin : Bool?
//   push : Bool?
//   pull : Bool?
// } derive(Show, Eq, ToJson)
//
// pub impl @json.FromJson for ParentPermissions with from_json(json, path) {
//   match json {
//     { "admin": admin, "push": push, "pull": pull } => {
//       let admin = admin
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let push = push
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let pull = pull
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       { admin, push, pull }
//     }
//     _ =>
//       raise @json.JsonDecodeError(
//         (path, "ParentPermissions::from_json: expected object"),
//       )
//   }
// }
//
// pub struct Parent {
//   id : Int?
//   parent_owner : ParentOwner?
//   name : String?
//   full_name : String?
//   description : String?
//   private : Bool?
//   fork : Bool?
//   url : String?
//   html_url : String?
//   clone_url : String?
//   git_url : String?
//   ssh_url : String?
//   svn_url : String?
//   mirror_url : String?
//   homepage : String?
//   language : Json?
//   forks_count : Int?
//   stargazers_count : Int?
//   watchers_count : Int?
//   size : Int?
//   default_branch : String?
//   open_issues_count : Int?
//   has_issues : Bool?
//   has_wiki : Bool?
//   has_downloads : Bool?
//   pushed_at : String? // Time?
//   created_at : String? // Time?
//   updated_at : String? // Time?
//   parent_permissions : ParentPermissions?
// } derive(Show, Eq)
//
// pub fn to_json(self : Parent) -> Json {
//   {
//     "id": self.id.to_json(),
//     "owner": self.parent_owner.to_json(),
//     "name": self.name.to_json(),
//     "full_name": self.full_name.to_json(),
//     "description": self.description.to_json(),
//     "private": self.private.to_json(),
//     "fork": self.fork.to_json(),
//     "url": self.url.to_json(),
//     "html_url": self.html_url.to_json(),
//     "clone_url": self.clone_url.to_json(),
//     "git_url": self.git_url.to_json(),
//     "ssh_url": self.ssh_url.to_json(),
//     "svn_url": self.svn_url.to_json(),
//     "mirror_url": self.mirror_url.to_json(),
//     "homepage": self.homepage.to_json(),
//     "language": self.language.to_json(),
//     "forks_count": self.forks_count.to_json(),
//     "stargazers_count": self.stargazers_count.to_json(),
//     "watchers_count": self.watchers_count.to_json(),
//     "size": self.size.to_json(),
//     "default_branch": self.default_branch.to_json(),
//     "open_issues_count": self.open_issues_count.to_json(),
//     "has_issues": self.has_issues.to_json(),
//     "has_wiki": self.has_wiki.to_json(),
//     "has_downloads": self.has_downloads.to_json(),
//     "pushed_at": self.pushed_at.to_json(),
//     "created_at": self.created_at.to_json(),
//     "updated_at": self.updated_at.to_json(),
//     "permissions": self.parent_permissions.to_json(),
//   }
// }
//
// pub impl @json.FromJson for Parent with from_json(json, path) {
//   match json {
//     {
//       "id": Number(id),
//       "owner": parent_owner,
//       "name": String(name),
//       "full_name": String(full_name),
//       "description": String(description),
//       "private": private,
//       "fork": fork,
//       "url": String(url),
//       "html_url": String(html_url),
//       "clone_url": String(clone_url),
//       "git_url": String(git_url),
//       "ssh_url": String(ssh_url),
//       "svn_url": String(svn_url),
//       "mirror_url": String(mirror_url),
//       "homepage": String(homepage),
//       "language": language,
//       "forks_count": Number(forks_count),
//       "stargazers_count": Number(stargazers_count),
//       "watchers_count": Number(watchers_count),
//       "size": Number(size),
//       "default_branch": String(default_branch),
//       "open_issues_count": Number(open_issues_count),
//       "has_issues": has_issues,
//       "has_wiki": has_wiki,
//       "has_downloads": has_downloads,
//       "pushed_at": String(pushed_at),
//       "created_at": String(created_at),
//       "updated_at": String(updated_at),
//       "permissions": parent_permissions,
//     } => {
//       let id = match id {
//         Number(id) => Some(id.to_int())
//         _ => None
//       }
//       let parent_owner : ParentOwner = @json.from_json!(parent_owner)
//       let private = private
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let fork = fork
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let forks_count = match forks_count {
//         Number(forks_count) => Some(forks_count.to_int())
//         _ => None
//       }
//       let stargazers_count = match stargazers_count {
//         Number(stargazers_count) => Some(stargazers_count.to_int())
//         _ => None
//       }
//       let watchers_count = match watchers_count {
//         Number(watchers_count) => Some(watchers_count.to_int())
//         _ => None
//       }
//       let size = match size {
//         Number(size) => Some(size.to_int())
//         _ => None
//       }
//       let open_issues_count = match open_issues_count {
//         Number(open_issues_count) => Some(open_issues_count.to_int())
//         _ => None
//       }
//       let has_issues = has_issues
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let has_wiki = has_wiki
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let has_downloads = has_downloads
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let parent_permissions : ParentPermissions = @json.from_json!(
//         parent_permissions,
//       )
//       {
//         id,
//         parent_owner,
//         name,
//         full_name,
//         description,
//         private,
//         fork,
//         url,
//         html_url,
//         clone_url,
//         git_url,
//         ssh_url,
//         svn_url,
//         mirror_url,
//         homepage,
//         language,
//         forks_count,
//         stargazers_count,
//         watchers_count,
//         size,
//         default_branch,
//         open_issues_count,
//         has_issues,
//         has_wiki,
//         has_downloads,
//         pushed_at,
//         created_at,
//         updated_at,
//         parent_permissions,
//       }
//     }
//     _ =>
//       raise @json.JsonDecodeError((path, "Parent::from_json: expected object"))
//   }
// }
//
// pub struct SourceOwner {
//   login : String?
//   id : Int?
//   avatar_url : String?
//   gravatar_id : String?
//   url : String?
//   html_url : String?
//   followers_url : String?
//   following_url : String?
//   gists_url : String?
//   starred_url : String?
//   subscriptions_url : String?
//   organizations_url : String?
//   repos_url : String?
//   events_url : String?
//   received_events_url : String?
//   type_ : String?
//   site_admin : Bool?
// } derive(Show, Eq)
//
// pub fn to_json(self : SourceOwner) -> Json {
//   {
//     "login": self.login.to_json(),
//     "id": self.id.to_json(),
//     "avatar_url": self.avatar_url.to_json(),
//     "gravatar_id": self.gravatar_id.to_json(),
//     "url": self.url.to_json(),
//     "html_url": self.html_url.to_json(),
//     "followers_url": self.followers_url.to_json(),
//     "following_url": self.following_url.to_json(),
//     "gists_url": self.gists_url.to_json(),
//     "starred_url": self.starred_url.to_json(),
//     "subscriptions_url": self.subscriptions_url.to_json(),
//     "organizations_url": self.organizations_url.to_json(),
//     "repos_url": self.repos_url.to_json(),
//     "events_url": self.events_url.to_json(),
//     "received_events_url": self.received_events_url.to_json(),
//     "type": self.type_.to_json(),
//     "site_admin": self.site_admin.to_json(),
//   }
// }
//
// pub impl @json.FromJson for SourceOwner with from_json(json, path) {
//   match json {
//     {
//       "login": String(login),
//       "id": Number(id),
//       "avatar_url": String(avatar_url),
//       "gravatar_id": String(gravatar_id),
//       "url": String(url),
//       "html_url": String(html_url),
//       "followers_url": String(followers_url),
//       "following_url": String(following_url),
//       "gists_url": String(gists_url),
//       "starred_url": String(starred_url),
//       "subscriptions_url": String(subscriptions_url),
//       "organizations_url": String(organizations_url),
//       "repos_url": String(repos_url),
//       "events_url": String(events_url),
//       "received_events_url": String(received_events_url),
//       "type": String(type_),
//       "site_admin": site_admin,
//     } => {
//       let id = match id {
//         Number(id) => Some(id.to_int())
//         _ => None
//       }
//       let site_admin = site_admin
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       {
//         login,
//         id,
//         avatar_url,
//         gravatar_id,
//         url,
//         html_url,
//         followers_url,
//         following_url,
//         gists_url,
//         starred_url,
//         subscriptions_url,
//         organizations_url,
//         repos_url,
//         events_url,
//         received_events_url,
//         type_,
//         site_admin,
//       }
//     }
//     _ =>
//       raise @json.JsonDecodeError(
//         (path, "SourceOwner::from_json: expected object"),
//       )
//   }
// }
//
// pub struct SourcePermissions {
//   admin : Bool?
//   push : Bool?
//   pull : Bool?
// } derive(Show, Eq, ToJson)
//
// pub impl @json.FromJson for SourcePermissions with from_json(json, path) {
//   match json {
//     { "admin": admin, "push": push, "pull": pull } => {
//       let admin = admin
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let push = push
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let pull = pull
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       { admin, push, pull }
//     }
//     _ =>
//       raise @json.JsonDecodeError(
//         (path, "SourcePermissions::from_json: expected object"),
//       )
//   }
// }
//
// pub struct Source {
//   id : Int?
//   source_owner : SourceOwner?
//   name : String?
//   full_name : String?
//   description : String?
//   private : Bool?
//   fork : Bool?
//   url : String?
//   html_url : String?
//   clone_url : String?
//   git_url : String?
//   ssh_url : String?
//   svn_url : String?
//   mirror_url : String?
//   homepage : String?
//   language : Json?
//   forks_count : Int?
//   stargazers_count : Int?
//   watchers_count : Int?
//   size : Int?
//   default_branch : String?
//   open_issues_count : Int?
//   has_issues : Bool?
//   has_wiki : Bool?
//   has_downloads : Bool?
//   pushed_at : String? // Time?
//   created_at : String? // Time?
//   updated_at : String? // Time?
//   source_permissions : SourcePermissions?
// } derive(Show, Eq)
//
// pub fn to_json(self : Source) -> Json {
//   {
//     "id": self.id.to_json(),
//     "owner": self.source_owner.to_json(),
//     "name": self.name.to_json(),
//     "full_name": self.full_name.to_json(),
//     "description": self.description.to_json(),
//     "private": self.private.to_json(),
//     "fork": self.fork.to_json(),
//     "url": self.url.to_json(),
//     "html_url": self.html_url.to_json(),
//     "clone_url": self.clone_url.to_json(),
//     "git_url": self.git_url.to_json(),
//     "ssh_url": self.ssh_url.to_json(),
//     "svn_url": self.svn_url.to_json(),
//     "mirror_url": self.mirror_url.to_json(),
//     "homepage": self.homepage.to_json(),
//     "language": self.language.to_json(),
//     "forks_count": self.forks_count.to_json(),
//     "stargazers_count": self.stargazers_count.to_json(),
//     "watchers_count": self.watchers_count.to_json(),
//     "size": self.size.to_json(),
//     "default_branch": self.default_branch.to_json(),
//     "open_issues_count": self.open_issues_count.to_json(),
//     "has_issues": self.has_issues.to_json(),
//     "has_wiki": self.has_wiki.to_json(),
//     "has_downloads": self.has_downloads.to_json(),
//     "pushed_at": self.pushed_at.to_json(),
//     "created_at": self.created_at.to_json(),
//     "updated_at": self.updated_at.to_json(),
//     "permissions": self.source_permissions.to_json(),
//   }
// }
//
// pub impl @json.FromJson for Source with from_json(json, path) {
//   match json {
//     {
//       "id": Number(id),
//       "owner": source_owner,
//       "name": String(name),
//       "full_name": String(full_name),
//       "description": String(description),
//       "private": private,
//       "fork": fork,
//       "url": String(url),
//       "html_url": String(html_url),
//       "clone_url": String(clone_url),
//       "git_url": String(git_url),
//       "ssh_url": String(ssh_url),
//       "svn_url": String(svn_url),
//       "mirror_url": String(mirror_url),
//       "homepage": String(homepage),
//       "language": language,
//       "forks_count": Number(forks_count),
//       "stargazers_count": Number(stargazers_count),
//       "watchers_count": Number(watchers_count),
//       "size": Number(size),
//       "default_branch": String(default_branch),
//       "open_issues_count": Number(open_issues_count),
//       "has_issues": has_issues,
//       "has_wiki": has_wiki,
//       "has_downloads": has_downloads,
//       "pushed_at": String(pushed_at),
//       "created_at": String(created_at),
//       "updated_at": String(updated_at),
//       "permissions": source_permissions,
//     } => {
//       let id = match id {
//         Number(id) => Some(id.to_int())
//         _ => None
//       }
//       let source_owner : SourceOwner = @json.from_json!(source_owner)
//       let private = private
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let fork = fork
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let forks_count = match forks_count {
//         Number(forks_count) => Some(forks_count.to_int())
//         _ => None
//       }
//       let stargazers_count = match stargazers_count {
//         Number(stargazers_count) => Some(stargazers_count.to_int())
//         _ => None
//       }
//       let watchers_count = match watchers_count {
//         Number(watchers_count) => Some(watchers_count.to_int())
//         _ => None
//       }
//       let size = match size {
//         Number(size) => Some(size.to_int())
//         _ => None
//       }
//       let open_issues_count = match open_issues_count {
//         Number(open_issues_count) => Some(open_issues_count.to_int())
//         _ => None
//       }
//       let has_issues = has_issues
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let has_wiki = has_wiki
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let has_downloads = has_downloads
//         .as_bool()
//         .or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
//       let source_permissions : SourcePermissions = @json.from_json!(
//         source_permissions,
//       )
//       {
//         id,
//         source_owner,
//         name,
//         full_name,
//         description,
//         private,
//         fork,
//         url,
//         html_url,
//         clone_url,
//         git_url,
//         ssh_url,
//         svn_url,
//         mirror_url,
//         homepage,
//         language,
//         forks_count,
//         stargazers_count,
//         watchers_count,
//         size,
//         default_branch,
//         open_issues_count,
//         has_issues,
//         has_wiki,
//         has_downloads,
//         pushed_at,
//         created_at,
//         updated_at,
//         source_permissions,
//       }
//     }
//     _ =>
//       raise @json.JsonDecodeError((path, "Source::from_json: expected object"))
//   }
// }
