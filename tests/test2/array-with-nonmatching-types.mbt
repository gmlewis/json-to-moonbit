pub struct AutoGenerated {
  booleanfield : Bool
  somearray : Array[Somearray]
  date : String
} derive(Show, Eq, ToJson, FromJson)

pub fn AutoGenerated::new() -> AutoGenerated {
  {
    booleanfield: false,
    somearray: [],
    date: "",
  }
}

pub struct Somearray {
  id : Json
  name : String
  features : Json
} derive(Show, Eq, ToJson)

pub fn Somearray::new() -> Somearray {
  {
    id: Null,
    name: "",
    features: Null,
  }
}

pub impl @json.FromJson for Somearray with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "Somearray::from_json: expected object"),
      )
  }
  let id : Json = match json.get("id") {
    Some(id) => id
    _ => raise @json.JsonDecodeError((path, "Somearray::from_json:id expected valid Json"))
  }
  let name : String = match json.get("name") {
    Some(String(name)) => name
    _ => raise @json.JsonDecodeError((path, "Somearray::from_json:name: expected String"))
  }
  let features : Json = match json.get("features") {
    Some(features) => features
    _ => raise @json.JsonDecodeError((path, "Somearray::from_json:features expected valid Json"))
  }
  {
    id,
    name,
    features,
  }
}
