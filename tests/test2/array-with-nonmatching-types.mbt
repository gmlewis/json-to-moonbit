pub struct AutoGenerated {
  booleanfield : Bool
  somearray : Array[Somearray]
  date : String
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for AutoGenerated with from_json(json, path) {
  match json {
    {
      "booleanfield": booleanfield,
      "somearray": Array(somearray),
      "date": String(date),
    } => {
      let booleanfield = booleanfield.as_bool().or_error!(@json.JsonDecodeError((path, "unable to parse bool")))
      let somearray : Array[Somearray] = somearray_array_from_json!(somearray)
      {
        booleanfield,
        somearray,
        date,
      }
    }
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json: expected object"))
  }
}

pub fn somearray_array_from_json(json : Array[Json]) -> Array[Somearray]!@json.JsonDecodeError {
  let arr: Array[Somearray] = Array::new(capacity = json.length())
  each_exn!(
    json,
    fn(jv) {
      let el : Somearray = @json.from_json!(jv)
      arr.push(el)
    }
  )
  arr
}

pub struct Somearray {
  id : Json
  name : String
  features : Json
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for Somearray with from_json(json, path) {
  match json {
    {
      "id": id,
      "name": String(name),
      "features": features,
    } => {
      {
        id,
        name,
        features,
      }
    }
    _ => raise @json.JsonDecodeError((path, "Somearray::from_json: expected object"))
  }
}

fn each_exn[T](arr : Array[T], func : (T) -> Unit!@json.JsonDecodeError) -> Unit!@json.JsonDecodeError {
  for i = 0; i < arr.length(); i = i + 1 {
    func!(arr[i])
  }
}
