pub struct AutoGenerated {
  first : First
  second : Second
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for AutoGenerated with from_json(json, path) {
  match json {
    {
      "first": first,
      "second": second,
    } => {
      let first : First = @json.from_json!(first)
      let second : Second = @json.from_json!(second)
      {
        first,
        second,
      }
    }
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json: expected object"))
  }
}

pub struct Type {
  short : String
  long : String
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for Type with from_json(json, path) {
  match json {
    {
      "short": String(short),
      "long": String(long),
    } => {
      {
        short,
        long,
      }
    }
    _ => raise @json.JsonDecodeError((path, "Type::from_json: expected object"))
  }
}

pub struct First {
  id : Int
  type_ : Type
} derive(Show, Eq)

pub fn to_json(self : First) -> Json {
  {
    "id": self.id.to_json(),
    "type": self.type_.to_json(),
  }
}

pub impl @json.FromJson for First with from_json(json, path) {
  match json {
    {
      "id": Number(id),
      "type": type_,
    } => {
      let id = id.to_int()
      let type_ : Type = @json.from_json!(type_)
      {
        id,
        type_,
      }
    }
    _ => raise @json.JsonDecodeError((path, "First::from_json: expected object"))
  }
}

pub struct SecondType {
  long : String
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for SecondType with from_json(json, path) {
  match json {
    {
      "long": String(long),
    } => {
      {
        long,
      }
    }
    _ => raise @json.JsonDecodeError((path, "SecondType::from_json: expected object"))
  }
}

pub struct Second {
  id : Int
  second_type : SecondType
} derive(Show, Eq)

pub fn to_json(self : Second) -> Json {
  {
    "id": self.id.to_json(),
    "type": self.second_type.to_json(),
  }
}

pub impl @json.FromJson for Second with from_json(json, path) {
  match json {
    {
      "id": Number(id),
      "type": second_type,
    } => {
      let id = id.to_int()
      let second_type : SecondType = @json.from_json!(second_type)
      {
        id,
        second_type,
      }
    }
    _ => raise @json.JsonDecodeError((path, "Second::from_json: expected object"))
  }
}
