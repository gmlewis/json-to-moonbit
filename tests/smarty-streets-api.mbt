pub struct AutoGenerated {
  auto_generated_array : Array[AutoGeneratedArray]
} derive(Show, Eq)

pub fn to_json(self : AutoGenerated) -> Json {
  self.auto_generated_array.to_json()
}

pub struct AutoGeneratedArray {
  input_index : Int
  candidate_index : Int
  delivery_line1 : String
  last_line : String
  delivery_point_barcode : String
  components : Components
  metadata : Metadata
  analysis : Analysis
} derive(Show, Eq)

pub fn to_json(self : AutoGeneratedArray) -> Json {
  {
    "input_index": self.input_index.to_json(),
    "candidate_index": self.candidate_index.to_json(),
    "delivery_line_1": self.delivery_line1.to_json(),
    "last_line": self.last_line.to_json(),
    "delivery_point_barcode": self.delivery_point_barcode.to_json(),
    "components": self.components.to_json(),
    "metadata": self.metadata.to_json(),
    "analysis": self.analysis.to_json(),
  }
}

pub struct Components {
  primary_number : String
  street_predirection : String
  street_name : String
  street_suffix : String
  city_name : String
  state_abbreviation : String
  zipcode : String
  plus4_code : String
  delivery_point : String
  delivery_point_check_digit : String
} derive(Show, Eq)

pub fn to_json(self : Components) -> Json {
  {
    "primary_number": self.primary_number.to_json(),
    "street_predirection": self.street_predirection.to_json(),
    "street_name": self.street_name.to_json(),
    "street_suffix": self.street_suffix.to_json(),
    "city_name": self.city_name.to_json(),
    "state_abbreviation": self.state_abbreviation.to_json(),
    "zipcode": self.zipcode.to_json(),
    "plus4_code": self.plus4_code.to_json(),
    "delivery_point": self.delivery_point.to_json(),
    "delivery_point_check_digit": self.delivery_point_check_digit.to_json(),
  }
}

pub struct Metadata {
  record_type : String
  zip_type : String
  county_fips : String
  county_name : String
  carrier_route : String
  congressional_district : String
  rdi : String
  elot_sequence : String
  elot_sort : String
  latitude : Double
  longitude : Double
  precision : String
  time_zone : String
  utc_offset : Int
  dst : Bool
} derive(Show, Eq)

pub fn to_json(self : Metadata) -> Json {
  {
    "record_type": self.record_type.to_json(),
    "zip_type": self.zip_type.to_json(),
    "county_fips": self.county_fips.to_json(),
    "county_name": self.county_name.to_json(),
    "carrier_route": self.carrier_route.to_json(),
    "congressional_district": self.congressional_district.to_json(),
    "rdi": self.rdi.to_json(),
    "elot_sequence": self.elot_sequence.to_json(),
    "elot_sort": self.elot_sort.to_json(),
    "latitude": self.latitude.to_json(),
    "longitude": self.longitude.to_json(),
    "precision": self.precision.to_json(),
    "time_zone": self.time_zone.to_json(),
    "utc_offset": self.utc_offset.to_json(),
    "dst": self.dst.to_json(),
  }
}

pub struct Analysis {
  dpv_match_code : String
  dpv_footnotes : String
  dpv_cmra : String
  dpv_vacant : String
  active : String
} derive(Show, Eq)

pub fn to_json(self : Analysis) -> Json {
  {
    "dpv_match_code": self.dpv_match_code.to_json(),
    "dpv_footnotes": self.dpv_footnotes.to_json(),
    "dpv_cmra": self.dpv_cmra.to_json(),
    "dpv_vacant": self.dpv_vacant.to_json(),
    "active": self.active.to_json(),
  }
}
