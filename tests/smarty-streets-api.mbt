pub struct AutoGenerated {
  auto_generated_array : Array[AutoGeneratedArray]
} derive(Show, Eq)

pub fn to_json(self : AutoGenerated) -> Json {
  self.auto_generated_array.to_json()
}

pub struct AutoGeneratedArray {
  input_index : Int // `json:"input_index"`
  candidate_index : Int // `json:"candidate_index"`
  delivery_line1 : String // `json:"delivery_line_1"`
  last_line : String // `json:"last_line"`
  delivery_point_barcode : String // `json:"delivery_point_barcode"`
  components : Components // `json:"components"`
  metadata : Metadata // `json:"metadata"`
  analysis : Analysis // `json:"analysis"`
} derive(Show, Eq)

pub fn to_json(self : AutoGeneratedArray) -> Json {
  {
    "input_index": self.input_index.to_json(),
    "candidate_index": self.candidate_index.to_json(),
    "delivery_line_1": self.delivery_line1.to_json(),
    "last_line": self.last_line.to_json(),
    "delivery_point_barcode": self.delivery_point_barcode.to_json(),
    "components": self.components.to_json(),
    "metadata": self.metadata.to_json(),
    "analysis": self.analysis.to_json(),
  }
}

pub struct Components {
  primary_number : String // `json:"primary_number"`
  street_predirection : String // `json:"street_predirection"`
  street_name : String // `json:"street_name"`
  street_suffix : String // `json:"street_suffix"`
  city_name : String // `json:"city_name"`
  state_abbreviation : String // `json:"state_abbreviation"`
  zipcode : String // `json:"zipcode"`
  plus4_code : String // `json:"plus4_code"`
  delivery_point : String // `json:"delivery_point"`
  delivery_point_check_digit : String // `json:"delivery_point_check_digit"`
} derive(Show, Eq)

pub fn to_json(self : Components) -> Json {
  {
    "primary_number": self.primary_number.to_json(),
    "street_predirection": self.street_predirection.to_json(),
    "street_name": self.street_name.to_json(),
    "street_suffix": self.street_suffix.to_json(),
    "city_name": self.city_name.to_json(),
    "state_abbreviation": self.state_abbreviation.to_json(),
    "zipcode": self.zipcode.to_json(),
    "plus4_code": self.plus4_code.to_json(),
    "delivery_point": self.delivery_point.to_json(),
    "delivery_point_check_digit": self.delivery_point_check_digit.to_json(),
  }
}

pub struct Metadata {
  record_type : String // `json:"record_type"`
  zip_type : String // `json:"zip_type"`
  county_fips : String // `json:"county_fips"`
  county_name : String // `json:"county_name"`
  carrier_route : String // `json:"carrier_route"`
  congressional_district : String // `json:"congressional_district"`
  rdi : String // `json:"rdi"`
  elot_sequence : String // `json:"elot_sequence"`
  elot_sort : String // `json:"elot_sort"`
  latitude : Double // `json:"latitude"`
  longitude : Double // `json:"longitude"`
  precision : String // `json:"precision"`
  time_zone : String // `json:"time_zone"`
  utc_offset : Int // `json:"utc_offset"`
  dst : Bool // `json:"dst"`
} derive(Show, Eq)

pub fn to_json(self : Metadata) -> Json {
  {
    "record_type": self.record_type.to_json(),
    "zip_type": self.zip_type.to_json(),
    "county_fips": self.county_fips.to_json(),
    "county_name": self.county_name.to_json(),
    "carrier_route": self.carrier_route.to_json(),
    "congressional_district": self.congressional_district.to_json(),
    "rdi": self.rdi.to_json(),
    "elot_sequence": self.elot_sequence.to_json(),
    "elot_sort": self.elot_sort.to_json(),
    "latitude": self.latitude.to_json(),
    "longitude": self.longitude.to_json(),
    "precision": self.precision.to_json(),
    "time_zone": self.time_zone.to_json(),
    "utc_offset": self.utc_offset.to_json(),
    "dst": self.dst.to_json(),
  }
}

pub struct Analysis {
  dpv_match_code : String // `json:"dpv_match_code"`
  dpv_footnotes : String // `json:"dpv_footnotes"`
  dpv_cmra : String // `json:"dpv_cmra"`
  dpv_vacant : String // `json:"dpv_vacant"`
  active : String // `json:"active"`
} derive(Show, Eq)

pub fn to_json(self : Analysis) -> Json {
  {
    "dpv_match_code": self.dpv_match_code.to_json(),
    "dpv_footnotes": self.dpv_footnotes.to_json(),
    "dpv_cmra": self.dpv_cmra.to_json(),
    "dpv_vacant": self.dpv_vacant.to_json(),
    "active": self.active.to_json(),
  }
}
