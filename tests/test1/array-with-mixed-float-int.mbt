pub struct AutoGenerated {
  age_of_the_universe : Array[AgeOfTheUniverse]
  age_of_the_earth : Array[AgeOfTheEarth]
  date : String
} derive(Show, Eq)

pub fn AutoGenerated::new() -> AutoGenerated {
  {
    age_of_the_universe: [],
    age_of_the_earth: [],
    date: "",
  }
}

pub fn to_json(self : AutoGenerated) -> Json {
  let json : Map[String, Json] = {}
  json["age of the universe"] = self.age_of_the_universe.to_json()
  json["age of the earth"] = self.age_of_the_earth.to_json()
  json["date"] = self.date.to_json()
  json.to_json()
}

pub impl @json.FromJson for AutoGenerated with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    _ =>
      raise @json.JsonDecodeError(
        (path, "AutoGenerated::from_json: expected object"),
      )
  }
  let age_of_the_universe : Array[AgeOfTheUniverse] = match json.get("age of the universe") {
    Some(Array(age_of_the_universe)) => age_of_the_universe_array_from_json!(age_of_the_universe)
    e => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:age_of_the_universe: expected Array: got \{e}"))
  }
  let age_of_the_earth : Array[AgeOfTheEarth] = match json.get("age of the earth") {
    Some(Array(age_of_the_earth)) => age_of_the_earth_array_from_json!(age_of_the_earth)
    e => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:age_of_the_earth: expected Array: got \{e}"))
  }
  let date : String = match json.get("date") {
    Some(String(date)) => date
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json:date: expected String"))
  }
  {
    age_of_the_universe,
    age_of_the_earth,
    date,
  }
}

pub fn age_of_the_universe_array_from_json(json : Array[Json]) -> Array[AgeOfTheUniverse]!@json.JsonDecodeError {
  let arr: Array[AgeOfTheUniverse] = Array::new(capacity = json.length())
  for jv in json {
    let el : AgeOfTheUniverse = @json.from_json!(jv)
    arr.push(el)
  }
  arr
}

pub fn age_of_the_earth_array_from_json(json : Array[Json]) -> Array[AgeOfTheEarth]!@json.JsonDecodeError {
  let arr: Array[AgeOfTheEarth] = Array::new(capacity = json.length())
  for jv in json {
    let el : AgeOfTheEarth = @json.from_json!(jv)
    arr.push(el)
  }
  arr
}

pub struct AgeOfTheUniverse {
  name : String
  value : Double
} derive(Show, Eq, ToJson, FromJson)

pub fn AgeOfTheUniverse::new() -> AgeOfTheUniverse {
  {
    name: "",
    value: 0,
  }
}

pub struct AgeOfTheEarth {
  name : String
  value : Int64
} derive(Show, Eq, ToJson, FromJson)

pub fn AgeOfTheEarth::new() -> AgeOfTheEarth {
  {
    name: "",
    value: 0,
  }
}
