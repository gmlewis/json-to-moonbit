pub struct AutoGenerated {
  age_of_the_universe : Array[AgeOfTheUniverse]
  age_of_the_earth : Array[AgeOfTheEarth]
  date : String
} derive(Show, Eq)

pub fn to_json(self : AutoGenerated) -> Json {
  {
    "age of the universe": self.age_of_the_universe.to_json(),
    "age of the earth": self.age_of_the_earth.to_json(),
    "date": self.date.to_json(),
  }
}

pub impl @json.FromJson for AutoGenerated with from_json(json, path) {
  match json {
    {
      "age of the universe": Array(age_of_the_universe),
      "age of the earth": Array(age_of_the_earth),
      "date": String(date),
    } => {
      let age_of_the_universe : Array[AgeOfTheUniverse] = age_of_the_universe_array_from_json!(age_of_the_universe)
      let age_of_the_earth : Array[AgeOfTheEarth] = age_of_the_earth_array_from_json!(age_of_the_earth)
      {
        age_of_the_universe,
        age_of_the_earth,
        date,
      }
    }
    _ => raise @json.JsonDecodeError((path, "AutoGenerated::from_json: expected object"))
  }
}

pub fn age_of_the_universe_array_from_json(json : Array[Json]) -> Array[AgeOfTheUniverse]!@json.JsonDecodeError {
  let arr: Array[AgeOfTheUniverse] = Array::new(capacity = json.length())
  each_exn!(
    json,
    fn(jv) {
      let el : AgeOfTheUniverse = @json.from_json!(jv)
      arr.push(el)
    }
  )
  arr
}

pub fn age_of_the_earth_array_from_json(json : Array[Json]) -> Array[AgeOfTheEarth]!@json.JsonDecodeError {
  let arr: Array[AgeOfTheEarth] = Array::new(capacity = json.length())
  each_exn!(
    json,
    fn(jv) {
      let el : AgeOfTheEarth = @json.from_json!(jv)
      arr.push(el)
    }
  )
  arr
}

pub struct AgeOfTheUniverse {
  name : String
  value : Double
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for AgeOfTheUniverse with from_json(json, path) {
  match json {
    {
      "name": String(name),
      "value": Number(value),
    } => {
      {
        name,
        value,
      }
    }
    _ => raise @json.JsonDecodeError((path, "AgeOfTheUniverse::from_json: expected object"))
  }
}

pub struct AgeOfTheEarth {
  name : String
  value : Int64
} derive(Show, Eq, ToJson)

pub impl @json.FromJson for AgeOfTheEarth with from_json(json, path) {
  match json {
    {
      "name": String(name),
      "value": Number(value),
    } => {
      let value = value.to_int64()
      {
        name,
        value,
      }
    }
    _ => raise @json.JsonDecodeError((path, "AgeOfTheEarth::from_json: expected object"))
  }
}

fn each_exn[T](arr : Array[T], func : (T) -> Unit!@json.JsonDecodeError) -> Unit!@json.JsonDecodeError {
  for i = 0; i < arr.length(); i = i + 1 {
    func!(arr[i])
  }
}
