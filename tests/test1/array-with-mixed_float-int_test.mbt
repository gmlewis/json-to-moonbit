test "@test1.AutoGenerated::to_json works as expected" {
  let ag : @test1.AutoGenerated = {
    age_of_the_universe: [
      { name: "years", value: 6000 },
      { name: "in seconds", value: 189216000000 },
      { name: "in kapla", value: 1.388890903635169e-06 },
    ],
    age_of_the_earth: [
      { name: "in eons (roughly)", value: 0 },
      { name: "in years", value: 6000 },
      { name: "in seconds", value: 189216000000 },
    ],
    date: "2024-08-22",
  }
  let got = ag.to_json().stringify()
  let want =
    #|{"age of the universe":[{"name":"years","value":6000.0},{"name":"in seconds","value":1.89216e11},{"name":"in kapla","value":1.388890903635169e-6}],"age of the earth":[{"name":"in eons (roughly)","value":0.0},{"name":"in years","value":6000.0},{"name":"in seconds","value":1.89216e11}],"date":"2024-08-22"}
  assert_eq!(got, want)
}

test "@json.parse(@test1.AutoGenerated) works as expected" {
  let s =
    #|{"age of the universe":[{"name":"years","value":6000.0},{"name":"in seconds","value":1.89216e11},{"name":"in kapla","value":1.388890903635169e-6}],"age of the earth":[{"name":"in eons (roughly)","value":0.0},{"name":"in years","value":6000.0},{"name":"in seconds","value":1.89216e11}],"date":"2024-08-22"}
  let jv = @json.parse!(s)
  let got : @test1.AutoGenerated = @json.from_json!(jv)
  let want : @test1.AutoGenerated = {
    age_of_the_universe: [
      { name: "years", value: 6000 },
      { name: "in seconds", value: 189216000000 },
      { name: "in kapla", value: 1.388890903635169e-06 },
    ],
    age_of_the_earth: [
      { name: "in eons (roughly)", value: 0 },
      { name: "in years", value: 6000 },
      { name: "in seconds", value: 189216000000 },
    ],
    date: "2024-08-22",
  }
  assert_eq!(got, want)
}

test "AgeOfTheUniverse::to_json works as expected" {
  let au : @test1.AgeOfTheUniverse = { name: "years", value: 6000 }
  let got = au.to_json().stringify()
  let want =
    #|{"name":"years","value":6000.0}
  assert_eq!(got, want)
}

test "AgeOfTheUniverse::from_json works as expected" {
  let au =
    #|{"name":"years","value":6000}
  let jv = @json.parse!(au)
  let got : @test1.AgeOfTheUniverse = @json.from_json!(jv)
  inspect!(
    got,
    content=
      #|{name: "years", value: 6000.0}
    ,
  )
}

test "AgeOfTheEarth::to_json works as expected" {
  let ae : @test1.AgeOfTheEarth = { name: "years", value: 6000 }
  let got = ae.to_json().stringify()
  let want =
    #|{"name":"years","value":6000.0}
  assert_eq!(got, want)
}

test "AgeOfTheEarth::from_json works as expected" {
  let ae =
    #|{"name":"years","value":6000}
  let jv = @json.parse!(ae)
  let got : @test1.AgeOfTheEarth = @json.from_json!(jv)
  inspect!(
    got,
    content=
      #|{name: "years", value: 6000}
    ,
  )
}
