const jsonToMoonBit = require("./json-to-moonbit")

function quote(str) {
  return "'" + str
    .replace(/\t/g, '  ')
    .replace(/\n/g, '\\n')
    .replace(/\r/g, '\\r')
    .replace(/'/g, "\\'") + "'"
}

function test(includeExampleData) {
  const testCases = [
    {
      input: '{"SourceCode": "exampleDataHere"}',
      expected:
        'pub struct AutoGenerated {\n  source_code : String\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "SourceCode": self.source_code.to_json(),\n  }\n}\n',
    },
    {
      input: '{"source_code": "exampleDataHere"}',
      expected:
        'pub struct AutoGenerated {\n  source_code : String\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "source_code": self.source_code.to_json(),\n  }\n}\n',
    },
    {
      input: '{"sourceCode": "exampleDataHere"}',
      expected:
        'pub struct AutoGenerated {\n  source_code : String\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "sourceCode": self.source_code.to_json(),\n  }\n}\n',
    },
    {
      input: '{"SOURCE_CODE": ""}',
      expected:
        'pub struct AutoGenerated {\n  source_code : String\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "SOURCE_CODE": self.source_code.to_json(),\n  }\n}\n',
    },
    {
      input: '{"PublicIP": ""}',
      expected:
        'pub struct AutoGenerated {\n  public_ip : String\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "PublicIP": self.public_ip.to_json(),\n  }\n}\n',
    },
    {
      input: '{"public_ip": ""}',
      expected:
        'pub struct AutoGenerated {\n  public_ip : String\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "public_ip": self.public_ip.to_json(),\n  }\n}\n',
    },
    {
      input: '{"publicIP": ""}',
      expected:
        'pub struct AutoGenerated {\n  public_ip : String\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "publicIP": self.public_ip.to_json(),\n  }\n}\n',
    },
    {
      input: '{"PUBLIC_IP": ""}',
      expected:
        'pub struct AutoGenerated {\n  public_ip : String\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "PUBLIC_IP": self.public_ip.to_json(),\n  }\n}\n',
    },
    {
      input: '{"+1": "Fails", "-1": "This should not cause duplicate field name"}',
      expected:
        'pub struct AutoGenerated {\n  num1 : String\n  num10 : String\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "+1": self.num1.to_json(),\n    "-1": self.num10.to_json(),\n  }\n}\n',
    },
    {
      input: '{"age": 46}',
      expected:
        'pub struct AutoGenerated {\n  age : Int\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "age": self.age.to_json(),\n  }\n}\n',
    },
    {
      input: '{"negativeFloat": -1.00}',
      expected:
        'pub struct AutoGenerated {\n  negative_float : Double\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "negativeFloat": self.negative_float.to_json(),\n  }\n}\n',
    },
    {
      input: '{"zeroFloat": 0.00}',
      expected:
        'pub struct AutoGenerated {\n  zero_float : Double\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "zeroFloat": self.zero_float.to_json(),\n  }\n}\n',
    },
    {
      input: '{"positiveFloat": 1.00}',
      expected:
        'pub struct AutoGenerated {\n  positive_float : Double\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "positiveFloat": self.positive_float.to_json(),\n  }\n}\n',
    },
    {
      input: '{"negativeFloats": [-1.00, -2.00, -3.00]}',
      expected:
        'pub struct AutoGenerated {\n  negative_floats : Array[Double]\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "negativeFloats": self.negative_floats.to_json(),\n  }\n}\n',
    },
    {
      input: '{"zeroFloats": [0.00, 0.00, 0.00]}',
      expected:
        'pub struct AutoGenerated {\n  zero_floats : Array[Double]\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "zeroFloats": self.zero_floats.to_json(),\n  }\n}\n',
    },
    {
      input: '{"positiveFloats": [1.00, 2.00, 3.00]}',
      expected:
        'pub struct AutoGenerated {\n  positive_floats : Array[Double]\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "positiveFloats": self.positive_floats.to_json(),\n  }\n}\n',
    },
    {
      input: '{"topLevel": { "secondLevel": "exampleDataHere"} }',
      expected:
        'pub struct AutoGenerated {\n  top_level : TopLevel\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "topLevel": self.top_level.to_json(),\n  }\n}\n\npub struct TopLevel {\n  second_level : String\n} derive(Show, Eq)\n\npub fn to_json(self : TopLevel) -> Json {\n  {\n    "secondLevel": self.second_level.to_json(),\n  }\n}\n',
    },
    {
      input: '{"people": [{ "name": "Frank"}, {"name": "Dennis"}, {"name": "Dee"}, {"name": "Charley"}, {"name":"Mac"}] }',
      expected:
        'pub struct AutoGenerated {\n  people : Array[People]\n} derive(Show, Eq)\n\npub fn to_json(self : AutoGenerated) -> Json {\n  {\n    "people": self.people.to_json(),\n  }\n}\n\npub struct People {\n  name : String\n} derive(Show, Eq)\n\npub fn to_json(self : People) -> Json {\n  {\n    "name": self.name.to_json(),\n  }\n}\n',
    },
  ]

  for (const testCase of testCases) {
    const got = jsonToMoonBit(testCase.input, null, null, includeExampleData)
    if (got.error) {
      console.assert(!got.error, `format('${testCase.input}'): ${got.error}`)
      process.exitCode = 16
    } else {
      const exp = includeExampleData ? testCase.expectedWithExample : testCase.expected
      const success = got.moonbit === exp
      console.assert(success,
        `format('${testCase.input}'): \n  got:  ${quote(got.moonbit)}\n  want: ${quote(exp)}`
      )
      if (!success) process.exitCode = 17
    }
  }
  console.log(includeExampleData ? 'done testing samples with data' : 'done testing samples without data')
}

function testFiles() {
  const fs = require('fs')
  const path = require('path')

  const testCases = [
    'array-with-mixed-float-int',
    'array-with-nonmatching-types',
    'double-nested-objects',
    'duplicate-top-level-structs',
    'smarty-streets-api',
    'struct-of-array-of-struct',
  ]

  for (const testCase of testCases) {
    console.log(`\nRunning testCase: '${testCase}'`)
    try {
      const jsonData = fs.readFileSync(path.join('tests', testCase + '.json'), 'utf8')
      const expectedMoonBitData = fs.readFileSync(path.join('tests', testCase + '.mbt'), 'utf8')
      const got = jsonToMoonBit(jsonData)
      if (got.error) {
        console.assert(!got.error, `format('${jsonData}'): ${got.error}`)
        process.exitCode = 18
      } else {
        const success = got.moonbit === expectedMoonBitData
        console.assert(success,
          `format('${jsonData}'): \n  got:  ${quote(got.moonbit)}\n  want: ${quote(expectedMoonBitData)}`
        )
        if (!success) process.exitCode = 19
      }
    } catch (err) {
      console.error(err)
      process.exitCode = 20
    }
  }
  console.log('done testing files')
}

test(false)
// test(true)
testFiles()
